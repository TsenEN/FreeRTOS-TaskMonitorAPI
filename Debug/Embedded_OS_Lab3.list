
Embedded_OS_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000534c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080054dc  080054dc  000154dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a4  080055a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055ac  080055ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055ac  080055ac  000155ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055b0  080055b0  000155b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080055b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f08  20000010  080055c4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003f18  080055c4  00023f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013366  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000288d  00000000  00000000  000333a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001028  00000000  00000000  00035c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00036c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e35  00000000  00000000  00037b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d63e  00000000  00000000  00059995  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1200  00000000  00000000  00066fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001381d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000438c  00000000  00000000  00138250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054c4 	.word	0x080054c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080054c4 	.word	0x080054c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fa95 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f83f 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8c5 	bl	800067c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f899 	bl	8000628 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(Red_LED_App,"Red_LEDTask",130,(void *) NULL,1,NULL);
 80004f6:	2300      	movs	r3, #0
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2301      	movs	r3, #1
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2282      	movs	r2, #130	; 0x82
 8000502:	4912      	ldr	r1, [pc, #72]	; (800054c <main+0x6c>)
 8000504:	4812      	ldr	r0, [pc, #72]	; (8000550 <main+0x70>)
 8000506:	f002 fe1f 	bl	8003148 <xTaskCreate>
  xTaskCreate(Green_LED_App,"Green_LEDTask",130,(void *) NULL,1,NULL);
 800050a:	2300      	movs	r3, #0
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2282      	movs	r2, #130	; 0x82
 8000516:	490f      	ldr	r1, [pc, #60]	; (8000554 <main+0x74>)
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x78>)
 800051a:	f002 fe15 	bl	8003148 <xTaskCreate>
  xTaskCreate(TaskMonitor_App,"TaskMonitor",130,(void *) NULL,2,NULL);
 800051e:	2300      	movs	r3, #0
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2302      	movs	r3, #2
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2300      	movs	r3, #0
 8000528:	2282      	movs	r2, #130	; 0x82
 800052a:	490c      	ldr	r1, [pc, #48]	; (800055c <main+0x7c>)
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x80>)
 800052e:	f002 fe0b 	bl	8003148 <xTaskCreate>
  xTaskCreate(Delay_App,"Task_delay",130,(void *) NULL,3,NULL);
 8000532:	2300      	movs	r3, #0
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2303      	movs	r3, #3
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	2282      	movs	r2, #130	; 0x82
 800053e:	4909      	ldr	r1, [pc, #36]	; (8000564 <main+0x84>)
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x88>)
 8000542:	f002 fe01 	bl	8003148 <xTaskCreate>

  vTaskStartScheduler();
 8000546:	f002 ff71 	bl	800342c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054a:	e7fe      	b.n	800054a <main+0x6a>
 800054c:	080054dc 	.word	0x080054dc
 8000550:	08000705 	.word	0x08000705
 8000554:	080054e8 	.word	0x080054e8
 8000558:	08000731 	.word	0x08000731
 800055c:	080054f8 	.word	0x080054f8
 8000560:	0800075d 	.word	0x0800075d
 8000564:	08005504 	.word	0x08005504
 8000568:	08000785 	.word	0x08000785

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f004 ff85 	bl	800548a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xb4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SystemClock_Config+0xb4>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <SystemClock_Config+0xb4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <SystemClock_Config+0xb8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <SystemClock_Config+0xb8>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <SystemClock_Config+0xb8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fd0b 	bl	8000ff8 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005e8:	f000 f8e8 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f000 ff66 	bl	80014d8 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000612:	f000 f8d3 	bl	80007bc <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_USART2_UART_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000660:	f001 fb76 	bl	8001d50 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f8a7 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20003e54 	.word	0x20003e54
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_GPIO_Init+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_GPIO_Init+0x80>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_GPIO_Init+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_GPIO_Init+0x80>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a11      	ldr	r2, [pc, #68]	; (80006fc <MX_GPIO_Init+0x80>)
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_GPIO_Init+0x80>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_GPIO_Init+0x84>)
 80006d2:	f000 fc5d 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 80006d6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4619      	mov	r1, r3
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_GPIO_Init+0x84>)
 80006f0:	f000 fab4 	bl	8000c5c <HAL_GPIO_Init>

}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020c00 	.word	0x40020c00

08000704 <Red_LED_App>:

/* USER CODE BEGIN 4 */
void Red_LED_App(void *pvParameters){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer = 500;
 800070c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000710:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <Red_LED_App+0x28>)
 8000718:	f000 fc53 	bl	8000fc2 <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f002 fe51 	bl	80033c4 <vTaskDelay>
		Redtimer += 1;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000728:	e7f3      	b.n	8000712 <Red_LED_App+0xe>
 800072a:	bf00      	nop
 800072c:	40020c00 	.word	0x40020c00

08000730 <Green_LED_App>:
	}
}
void Green_LED_App(void *pvParameters){
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer = 1000;
 8000738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073c:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 800073e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <Green_LED_App+0x28>)
 8000744:	f000 fc3d 	bl	8000fc2 <HAL_GPIO_TogglePin>
		vTaskDelay(Greentimer);
 8000748:	68f8      	ldr	r0, [r7, #12]
 800074a:	f002 fe3b 	bl	80033c4 <vTaskDelay>
		Greentimer += 2;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3302      	adds	r3, #2
 8000752:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 8000754:	e7f3      	b.n	800073e <Green_LED_App+0xe>
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00

0800075c <TaskMonitor_App>:
	}
}
void TaskMonitor_App(void *pvParameters){
 800075c:	b580      	push	{r7, lr}
 800075e:	b08e      	sub	sp, #56	; 0x38
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	uint32_t Monitortimer = 200;
 8000764:	23c8      	movs	r3, #200	; 0xc8
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
	char MonitorTset[20];
	char num[15];
	int i = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
//		memset(num,'\0',sizeof(num));
//		itoa(i,num,10);
//		strcat(num," ");
//		sprintf(MonitorTset,"The point is %s\n\r",num);
//		HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
		Taskmonitor();
 800076c:	f003 fb64 	bl	8003e38 <Taskmonitor>
		vTaskDelay(Monitortimer);
 8000770:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000772:	f002 fe27 	bl	80033c4 <vTaskDelay>
		Monitortimer += 1;
 8000776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000778:	3301      	adds	r3, #1
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
		i += 1;
 800077c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077e:	3301      	adds	r3, #1
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
		Taskmonitor();
 8000782:	e7f3      	b.n	800076c <TaskMonitor_App+0x10>

08000784 <Delay_App>:
	}
}
void Delay_App(void *pvParameters){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	while(1){
		vTaskDelay(15000);
 800078c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000790:	f002 fe18 	bl	80033c4 <vTaskDelay>
 8000794:	e7fa      	b.n	800078c <Delay_App+0x8>
	...

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007aa:	f000 f955 	bl	8000a58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40001400 	.word	0x40001400

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <Error_Handler+0x6>

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a19      	ldr	r2, [pc, #100]	; (8000898 <HAL_UART_MspInit+0x84>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d12b      	bne.n	800088e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_UART_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <HAL_UART_MspInit+0x88>)
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_UART_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_UART_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_UART_MspInit+0x88>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_UART_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800086e:	230c      	movs	r3, #12
 8000870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800087e:	2307      	movs	r3, #7
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <HAL_UART_MspInit+0x8c>)
 800088a:	f000 f9e7 	bl	8000c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40004400 	.word	0x40004400
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000

080008a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	2037      	movs	r0, #55	; 0x37
 80008ba:	f000 f9a5 	bl	8000c08 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80008be:	2037      	movs	r0, #55	; 0x37
 80008c0:	f000 f9be 	bl	8000c40 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <HAL_InitTick+0xa0>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	4a1d      	ldr	r2, [pc, #116]	; (8000944 <HAL_InitTick+0xa0>)
 80008ce:	f043 0320 	orr.w	r3, r3, #32
 80008d2:	6413      	str	r3, [r2, #64]	; 0x40
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <HAL_InitTick+0xa0>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e0:	f107 0210 	add.w	r2, r7, #16
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 ffc0 	bl	8001870 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f0:	f000 ff96 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 80008f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f8:	4a13      	ldr	r2, [pc, #76]	; (8000948 <HAL_InitTick+0xa4>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	0c9b      	lsrs	r3, r3, #18
 8000900:	3b01      	subs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_InitTick+0xa8>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <HAL_InitTick+0xac>)
 8000908:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_InitTick+0xa8>)
 800090c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000910:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_InitTick+0xa8>)
 8000914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000916:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_InitTick+0xa8>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_InitTick+0xa8>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <HAL_InitTick+0xa8>)
 8000926:	f000 ffd5 	bl	80018d4 <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d104      	bne.n	800093a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000930:	4806      	ldr	r0, [pc, #24]	; (800094c <HAL_InitTick+0xa8>)
 8000932:	f001 f804 	bl	800193e <HAL_TIM_Base_Start_IT>
 8000936:	4603      	mov	r3, r0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3730      	adds	r7, #48	; 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	431bde83 	.word	0x431bde83
 800094c:	20003e94 	.word	0x20003e94
 8000950:	40001400 	.word	0x40001400

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <TIM7_IRQHandler+0x10>)
 8000986:	f000 fffe 	bl	8001986 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20003e94 	.word	0x20003e94

08000994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <SystemInit+0x28>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <SystemInit+0x28>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SystemInit+0x28>)
 80009aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ae:	609a      	str	r2, [r3, #8]
#endif
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009c6:	e003      	b.n	80009d0 <LoopCopyDataInit>

080009c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009ce:	3104      	adds	r1, #4

080009d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009d8:	d3f6      	bcc.n	80009c8 <CopyDataInit>
  ldr  r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009dc:	e002      	b.n	80009e4 <LoopFillZerobss>

080009de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009e0:	f842 3b04 	str.w	r3, [r2], #4

080009e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009e8:	d3f9      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ea:	f7ff ffd3 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f004 fd1d 	bl	800542c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f2:	f7ff fd75 	bl	80004e0 <main>
  bx  lr    
 80009f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009fc:	080055b4 	.word	0x080055b4
  ldr  r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a04:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a08:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a0c:	20003f18 	.word	0x20003f18

08000a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <HAL_Init+0x40>)
 8000a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_Init+0x40>)
 8000a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_Init+0x40>)
 8000a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f000 f8d8 	bl	8000bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff ff2e 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff febc 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023c00 	.word	0x40023c00

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20003ed4 	.word	0x20003ed4

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20003ed4 	.word	0x20003ed4

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff4c 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1a:	f7ff ff61 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	6978      	ldr	r0, [r7, #20]
 8000c26:	f7ff ffb1 	bl	8000b8c <NVIC_EncodePriority>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff80 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c38:	bf00      	nop
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff54 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	e16b      	b.n	8000f50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c78:	2201      	movs	r2, #1
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f040 815a 	bne.w	8000f4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d00b      	beq.n	8000cb6 <HAL_GPIO_Init+0x5a>
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d007      	beq.n	8000cb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000caa:	2b11      	cmp	r3, #17
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b12      	cmp	r3, #18
 8000cb4:	d130      	bne.n	8000d18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cec:	2201      	movs	r2, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	f003 0201 	and.w	r2, r3, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0xfc>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b12      	cmp	r3, #18
 8000d56:	d123      	bne.n	8000da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	08da      	lsrs	r2, r3, #3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3208      	adds	r2, #8
 8000d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	691a      	ldr	r2, [r3, #16]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	69b9      	ldr	r1, [r7, #24]
 8000d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0203 	and.w	r2, r3, #3
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 80b4 	beq.w	8000f4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b5f      	ldr	r3, [pc, #380]	; (8000f64 <HAL_GPIO_Init+0x308>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a5e      	ldr	r2, [pc, #376]	; (8000f64 <HAL_GPIO_Init+0x308>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <HAL_GPIO_Init+0x308>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfe:	4a5a      	ldr	r2, [pc, #360]	; (8000f68 <HAL_GPIO_Init+0x30c>)
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a51      	ldr	r2, [pc, #324]	; (8000f6c <HAL_GPIO_Init+0x310>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d02b      	beq.n	8000e82 <HAL_GPIO_Init+0x226>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a50      	ldr	r2, [pc, #320]	; (8000f70 <HAL_GPIO_Init+0x314>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d025      	beq.n	8000e7e <HAL_GPIO_Init+0x222>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4f      	ldr	r2, [pc, #316]	; (8000f74 <HAL_GPIO_Init+0x318>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d01f      	beq.n	8000e7a <HAL_GPIO_Init+0x21e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4e      	ldr	r2, [pc, #312]	; (8000f78 <HAL_GPIO_Init+0x31c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d019      	beq.n	8000e76 <HAL_GPIO_Init+0x21a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4d      	ldr	r2, [pc, #308]	; (8000f7c <HAL_GPIO_Init+0x320>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d013      	beq.n	8000e72 <HAL_GPIO_Init+0x216>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4c      	ldr	r2, [pc, #304]	; (8000f80 <HAL_GPIO_Init+0x324>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d00d      	beq.n	8000e6e <HAL_GPIO_Init+0x212>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4b      	ldr	r2, [pc, #300]	; (8000f84 <HAL_GPIO_Init+0x328>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x20e>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4a      	ldr	r2, [pc, #296]	; (8000f88 <HAL_GPIO_Init+0x32c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_GPIO_Init+0x20a>
 8000e62:	2307      	movs	r3, #7
 8000e64:	e00e      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e66:	2308      	movs	r3, #8
 8000e68:	e00c      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e6a:	2306      	movs	r3, #6
 8000e6c:	e00a      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e6e:	2305      	movs	r3, #5
 8000e70:	e008      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e72:	2304      	movs	r3, #4
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e004      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_GPIO_Init+0x228>
 8000e82:	2300      	movs	r3, #0
 8000e84:	69fa      	ldr	r2, [r7, #28]
 8000e86:	f002 0203 	and.w	r2, r2, #3
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4093      	lsls	r3, r2
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e94:	4934      	ldr	r1, [pc, #208]	; (8000f68 <HAL_GPIO_Init+0x30c>)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea2:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <HAL_GPIO_Init+0x330>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec6:	4a31      	ldr	r2, [pc, #196]	; (8000f8c <HAL_GPIO_Init+0x330>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <HAL_GPIO_Init+0x330>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ef0:	4a26      	ldr	r2, [pc, #152]	; (8000f8c <HAL_GPIO_Init+0x330>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <HAL_GPIO_Init+0x330>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <HAL_GPIO_Init+0x330>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <HAL_GPIO_Init+0x330>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f44:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_GPIO_Init+0x330>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	f67f ae90 	bls.w	8000c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3724      	adds	r7, #36	; 0x24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40021400 	.word	0x40021400
 8000f84:	40021800 	.word	0x40021800
 8000f88:	40021c00 	.word	0x40021c00
 8000f8c:	40013c00 	.word	0x40013c00

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	619a      	str	r2, [r3, #24]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d104      	bne.n	8000fe6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	041a      	lsls	r2, r3, #16
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e25b      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d075      	beq.n	8001102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001016:	4ba3      	ldr	r3, [pc, #652]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	2b04      	cmp	r3, #4
 8001020:	d00c      	beq.n	800103c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001022:	4ba0      	ldr	r3, [pc, #640]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800102a:	2b08      	cmp	r3, #8
 800102c:	d112      	bne.n	8001054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800102e:	4b9d      	ldr	r3, [pc, #628]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800103a:	d10b      	bne.n	8001054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	4b99      	ldr	r3, [pc, #612]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d05b      	beq.n	8001100 <HAL_RCC_OscConfig+0x108>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d157      	bne.n	8001100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e236      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800105c:	d106      	bne.n	800106c <HAL_RCC_OscConfig+0x74>
 800105e:	4b91      	ldr	r3, [pc, #580]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a90      	ldr	r2, [pc, #576]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e01d      	b.n	80010a8 <HAL_RCC_OscConfig+0xb0>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x98>
 8001076:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a8a      	ldr	r2, [pc, #552]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b88      	ldr	r3, [pc, #544]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a87      	ldr	r2, [pc, #540]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e00b      	b.n	80010a8 <HAL_RCC_OscConfig+0xb0>
 8001090:	4b84      	ldr	r3, [pc, #528]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a83      	ldr	r2, [pc, #524]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a80      	ldr	r2, [pc, #512]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d013      	beq.n	80010d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b0:	f7ff fce6 	bl	8000a80 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b8:	f7ff fce2 	bl	8000a80 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b64      	cmp	r3, #100	; 0x64
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e1fb      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0xc0>
 80010d6:	e014      	b.n	8001102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fcd2 	bl	8000a80 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fcce 	bl	8000a80 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1e7      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	4b6c      	ldr	r3, [pc, #432]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0xe8>
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d063      	beq.n	80011d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800110e:	4b65      	ldr	r3, [pc, #404]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111a:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001122:	2b08      	cmp	r3, #8
 8001124:	d11c      	bne.n	8001160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001126:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d116      	bne.n	8001160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	4b5c      	ldr	r3, [pc, #368]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <HAL_RCC_OscConfig+0x152>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d001      	beq.n	800114a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e1bb      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4952      	ldr	r1, [pc, #328]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115e:	e03a      	b.n	80011d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001168:	4b4f      	ldr	r3, [pc, #316]	; (80012a8 <HAL_RCC_OscConfig+0x2b0>)
 800116a:	2201      	movs	r2, #1
 800116c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116e:	f7ff fc87 	bl	8000a80 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fc83 	bl	8000a80 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e19c      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4940      	ldr	r1, [pc, #256]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011aa:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <HAL_RCC_OscConfig+0x2b0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc66 	bl	8000a80 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b8:	f7ff fc62 	bl	8000a80 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e17b      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d030      	beq.n	8001244 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d016      	beq.n	8001218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_RCC_OscConfig+0x2b4>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fc46 	bl	8000a80 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc42 	bl	8000a80 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e15b      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x200>
 8001216:	e015      	b.n	8001244 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_RCC_OscConfig+0x2b4>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fc2f 	bl	8000a80 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001226:	f7ff fc2b 	bl	8000a80 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e144      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800123a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a0 	beq.w	8001392 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10f      	bne.n	8001282 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127e:	2301      	movs	r3, #1
 8001280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x2b8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d121      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_RCC_OscConfig+0x2b8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_RCC_OscConfig+0x2b8>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129a:	f7ff fbf1 	bl	8000a80 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	e011      	b.n	80012c6 <HAL_RCC_OscConfig+0x2ce>
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	42470000 	.word	0x42470000
 80012ac:	42470e80 	.word	0x42470e80
 80012b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b4:	f7ff fbe4 	bl	8000a80 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e0fd      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b81      	ldr	r3, [pc, #516]	; (80014cc <HAL_RCC_OscConfig+0x4d4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d106      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2f0>
 80012da:	4b7d      	ldr	r3, [pc, #500]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012de:	4a7c      	ldr	r2, [pc, #496]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6713      	str	r3, [r2, #112]	; 0x70
 80012e6:	e01c      	b.n	8001322 <HAL_RCC_OscConfig+0x32a>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d10c      	bne.n	800130a <HAL_RCC_OscConfig+0x312>
 80012f0:	4b77      	ldr	r3, [pc, #476]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f4:	4a76      	ldr	r2, [pc, #472]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6713      	str	r3, [r2, #112]	; 0x70
 80012fc:	4b74      	ldr	r3, [pc, #464]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001300:	4a73      	ldr	r2, [pc, #460]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6713      	str	r3, [r2, #112]	; 0x70
 8001308:	e00b      	b.n	8001322 <HAL_RCC_OscConfig+0x32a>
 800130a:	4b71      	ldr	r3, [pc, #452]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	4a70      	ldr	r2, [pc, #448]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	6713      	str	r3, [r2, #112]	; 0x70
 8001316:	4b6e      	ldr	r3, [pc, #440]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131a:	4a6d      	ldr	r2, [pc, #436]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 800131c:	f023 0304 	bic.w	r3, r3, #4
 8001320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d015      	beq.n	8001356 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff fba9 	bl	8000a80 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	e00a      	b.n	8001348 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff fba5 	bl	8000a80 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001340:	4293      	cmp	r3, r2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0bc      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001348:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0ee      	beq.n	8001332 <HAL_RCC_OscConfig+0x33a>
 8001354:	e014      	b.n	8001380 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fb93 	bl	8000a80 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fb8f 	bl	8000a80 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0a6      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001374:	4b56      	ldr	r3, [pc, #344]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ee      	bne.n	800135e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d105      	bne.n	8001392 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001386:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a51      	ldr	r2, [pc, #324]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 800138c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8092 	beq.w	80014c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800139c:	4b4c      	ldr	r3, [pc, #304]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d05c      	beq.n	8001462 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d141      	bne.n	8001434 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b0:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <HAL_RCC_OscConfig+0x4dc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fb63 	bl	8000a80 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013be:	f7ff fb5f 	bl	8000a80 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e078      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d0:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69da      	ldr	r2, [r3, #28]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	019b      	lsls	r3, r3, #6
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	3b01      	subs	r3, #1
 80013f6:	041b      	lsls	r3, r3, #16
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	061b      	lsls	r3, r3, #24
 8001400:	4933      	ldr	r1, [pc, #204]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_RCC_OscConfig+0x4dc>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fb38 	bl	8000a80 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fb34 	bl	8000a80 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e04d      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x41c>
 8001432:	e045      	b.n	80014c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_RCC_OscConfig+0x4dc>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7ff fb21 	bl	8000a80 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001442:	f7ff fb1d 	bl	8000a80 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e036      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f0      	bne.n	8001442 <HAL_RCC_OscConfig+0x44a>
 8001460:	e02e      	b.n	80014c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e029      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <HAL_RCC_OscConfig+0x4d8>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	429a      	cmp	r2, r3
 8001480:	d11c      	bne.n	80014bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d115      	bne.n	80014bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001496:	4013      	ands	r3, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800149c:	4293      	cmp	r3, r2
 800149e:	d10d      	bne.n	80014bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d106      	bne.n	80014bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40007000 	.word	0x40007000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	42470060 	.word	0x42470060

080014d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0cc      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ec:	4b68      	ldr	r3, [pc, #416]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d90c      	bls.n	8001514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b65      	ldr	r3, [pc, #404]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	4b63      	ldr	r3, [pc, #396]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d001      	beq.n	8001514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0b8      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d020      	beq.n	8001562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800152c:	4b59      	ldr	r3, [pc, #356]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	4a58      	ldr	r2, [pc, #352]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001544:	4b53      	ldr	r3, [pc, #332]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	4a52      	ldr	r2, [pc, #328]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800154e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001550:	4b50      	ldr	r3, [pc, #320]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	494d      	ldr	r1, [pc, #308]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	4313      	orrs	r3, r2
 8001560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d044      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d107      	bne.n	8001586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	4b47      	ldr	r3, [pc, #284]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d119      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e07f      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d003      	beq.n	8001596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001592:	2b03      	cmp	r3, #3
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001596:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e06f      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e067      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b6:	4b37      	ldr	r3, [pc, #220]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f023 0203 	bic.w	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4934      	ldr	r1, [pc, #208]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c8:	f7ff fa5a 	bl	8000a80 <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d0:	f7ff fa56 	bl	8000a80 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e04f      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e6:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 020c 	and.w	r2, r3, #12
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d1eb      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d20c      	bcs.n	8001620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e032      	b.n	8001686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d008      	beq.n	800163e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4916      	ldr	r1, [pc, #88]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	4313      	orrs	r3, r2
 800163c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d009      	beq.n	800165e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	490e      	ldr	r1, [pc, #56]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800165e:	f000 f821 	bl	80016a4 <HAL_RCC_GetSysClockFreq>
 8001662:	4601      	mov	r1, r0
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	fa21 f303 	lsr.w	r3, r1, r3
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_RCC_ClockConfig+0x1c8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f910 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023c00 	.word	0x40023c00
 8001694:	40023800 	.word	0x40023800
 8001698:	0800558c 	.word	0x0800558c
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ba:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d007      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0x32>
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d008      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x38>
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 808d 	bne.w	80017ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016d2:	60bb      	str	r3, [r7, #8]
       break;
 80016d4:	e08c      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016d6:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <HAL_RCC_GetSysClockFreq+0x160>)
 80016d8:	60bb      	str	r3, [r7, #8]
      break;
 80016da:	e089      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016dc:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e6:	4b45      	ldr	r3, [pc, #276]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d023      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f2:	4b42      	ldr	r3, [pc, #264]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	099b      	lsrs	r3, r3, #6
 80016f8:	f04f 0400 	mov.w	r4, #0
 80016fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	ea03 0501 	and.w	r5, r3, r1
 8001708:	ea04 0602 	and.w	r6, r4, r2
 800170c:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <HAL_RCC_GetSysClockFreq+0x160>)
 800170e:	fb02 f106 	mul.w	r1, r2, r6
 8001712:	2200      	movs	r2, #0
 8001714:	fb02 f205 	mul.w	r2, r2, r5
 8001718:	440a      	add	r2, r1
 800171a:	493a      	ldr	r1, [pc, #232]	; (8001804 <HAL_RCC_GetSysClockFreq+0x160>)
 800171c:	fba5 0101 	umull	r0, r1, r5, r1
 8001720:	1853      	adds	r3, r2, r1
 8001722:	4619      	mov	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0400 	mov.w	r4, #0
 800172a:	461a      	mov	r2, r3
 800172c:	4623      	mov	r3, r4
 800172e:	f7fe fd57 	bl	80001e0 <__aeabi_uldivmod>
 8001732:	4603      	mov	r3, r0
 8001734:	460c      	mov	r4, r1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e049      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	099b      	lsrs	r3, r3, #6
 8001740:	f04f 0400 	mov.w	r4, #0
 8001744:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	ea03 0501 	and.w	r5, r3, r1
 8001750:	ea04 0602 	and.w	r6, r4, r2
 8001754:	4629      	mov	r1, r5
 8001756:	4632      	mov	r2, r6
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	f04f 0400 	mov.w	r4, #0
 8001760:	0154      	lsls	r4, r2, #5
 8001762:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001766:	014b      	lsls	r3, r1, #5
 8001768:	4619      	mov	r1, r3
 800176a:	4622      	mov	r2, r4
 800176c:	1b49      	subs	r1, r1, r5
 800176e:	eb62 0206 	sbc.w	r2, r2, r6
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	f04f 0400 	mov.w	r4, #0
 800177a:	0194      	lsls	r4, r2, #6
 800177c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001780:	018b      	lsls	r3, r1, #6
 8001782:	1a5b      	subs	r3, r3, r1
 8001784:	eb64 0402 	sbc.w	r4, r4, r2
 8001788:	f04f 0100 	mov.w	r1, #0
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	00e2      	lsls	r2, r4, #3
 8001792:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001796:	00d9      	lsls	r1, r3, #3
 8001798:	460b      	mov	r3, r1
 800179a:	4614      	mov	r4, r2
 800179c:	195b      	adds	r3, r3, r5
 800179e:	eb44 0406 	adc.w	r4, r4, r6
 80017a2:	f04f 0100 	mov.w	r1, #0
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	02a2      	lsls	r2, r4, #10
 80017ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017b0:	0299      	lsls	r1, r3, #10
 80017b2:	460b      	mov	r3, r1
 80017b4:	4614      	mov	r4, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	4621      	mov	r1, r4
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f04f 0400 	mov.w	r4, #0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	f7fe fd0c 	bl	80001e0 <__aeabi_uldivmod>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	3301      	adds	r3, #1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	60bb      	str	r3, [r7, #8]
      break;
 80017e8:	e002      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017ec:	60bb      	str	r3, [r7, #8]
      break;
 80017ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f0:	68bb      	ldr	r3, [r7, #8]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	00f42400 	.word	0x00f42400
 8001804:	017d7840 	.word	0x017d7840

08001808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_RCC_GetHCLKFreq+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000000 	.word	0x20000000

08001820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001824:	f7ff fff0 	bl	8001808 <HAL_RCC_GetHCLKFreq>
 8001828:	4601      	mov	r1, r0
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	0a9b      	lsrs	r3, r3, #10
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4a03      	ldr	r2, [pc, #12]	; (8001844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	fa21 f303 	lsr.w	r3, r1, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	0800559c 	.word	0x0800559c

08001848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800184c:	f7ff ffdc 	bl	8001808 <HAL_RCC_GetHCLKFreq>
 8001850:	4601      	mov	r1, r0
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	0b5b      	lsrs	r3, r3, #13
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	4a03      	ldr	r2, [pc, #12]	; (800186c <HAL_RCC_GetPCLK2Freq+0x24>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	0800559c 	.word	0x0800559c

08001870 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	220f      	movs	r2, #15
 800187e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <HAL_RCC_GetClockConfig+0x60>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 020f 	and.w	r2, r3, #15
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40023c00 	.word	0x40023c00

080018d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e01d      	b.n	8001922 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f815 	bl	800192a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f000 f968 	bl	8001be8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0201 	orr.w	r2, r2, #1
 8001954:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b06      	cmp	r3, #6
 8001966:	d007      	beq.n	8001978 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b02      	cmp	r3, #2
 800199a:	d122      	bne.n	80019e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d11b      	bne.n	80019e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f06f 0202 	mvn.w	r2, #2
 80019b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f8ee 	bl	8001baa <HAL_TIM_IC_CaptureCallback>
 80019ce:	e005      	b.n	80019dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f8e0 	bl	8001b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f8f1 	bl	8001bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d122      	bne.n	8001a36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d11b      	bne.n	8001a36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f06f 0204 	mvn.w	r2, #4
 8001a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f8c4 	bl	8001baa <HAL_TIM_IC_CaptureCallback>
 8001a22:	e005      	b.n	8001a30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f8b6 	bl	8001b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f8c7 	bl	8001bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d122      	bne.n	8001a8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d11b      	bne.n	8001a8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f06f 0208 	mvn.w	r2, #8
 8001a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f89a 	bl	8001baa <HAL_TIM_IC_CaptureCallback>
 8001a76:	e005      	b.n	8001a84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f88c 	bl	8001b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f89d 	bl	8001bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b10      	cmp	r3, #16
 8001a96:	d122      	bne.n	8001ade <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b10      	cmp	r3, #16
 8001aa4:	d11b      	bne.n	8001ade <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f06f 0210 	mvn.w	r2, #16
 8001aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f870 	bl	8001baa <HAL_TIM_IC_CaptureCallback>
 8001aca:	e005      	b.n	8001ad8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f862 	bl	8001b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f873 	bl	8001bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d10e      	bne.n	8001b0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d107      	bne.n	8001b0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0201 	mvn.w	r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7fe fe47 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b14:	2b80      	cmp	r3, #128	; 0x80
 8001b16:	d10e      	bne.n	8001b36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	2b80      	cmp	r3, #128	; 0x80
 8001b24:	d107      	bne.n	8001b36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f903 	bl	8001d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b40:	2b40      	cmp	r3, #64	; 0x40
 8001b42:	d10e      	bne.n	8001b62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4e:	2b40      	cmp	r3, #64	; 0x40
 8001b50:	d107      	bne.n	8001b62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f838 	bl	8001bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d10e      	bne.n	8001b8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d107      	bne.n	8001b8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f06f 0220 	mvn.w	r2, #32
 8001b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f8cd 	bl	8001d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a40      	ldr	r2, [pc, #256]	; (8001cfc <TIM_Base_SetConfig+0x114>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d013      	beq.n	8001c28 <TIM_Base_SetConfig+0x40>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c06:	d00f      	beq.n	8001c28 <TIM_Base_SetConfig+0x40>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a3d      	ldr	r2, [pc, #244]	; (8001d00 <TIM_Base_SetConfig+0x118>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00b      	beq.n	8001c28 <TIM_Base_SetConfig+0x40>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a3c      	ldr	r2, [pc, #240]	; (8001d04 <TIM_Base_SetConfig+0x11c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d007      	beq.n	8001c28 <TIM_Base_SetConfig+0x40>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a3b      	ldr	r2, [pc, #236]	; (8001d08 <TIM_Base_SetConfig+0x120>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d003      	beq.n	8001c28 <TIM_Base_SetConfig+0x40>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a3a      	ldr	r2, [pc, #232]	; (8001d0c <TIM_Base_SetConfig+0x124>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d108      	bne.n	8001c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a2f      	ldr	r2, [pc, #188]	; (8001cfc <TIM_Base_SetConfig+0x114>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02b      	beq.n	8001c9a <TIM_Base_SetConfig+0xb2>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c48:	d027      	beq.n	8001c9a <TIM_Base_SetConfig+0xb2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a2c      	ldr	r2, [pc, #176]	; (8001d00 <TIM_Base_SetConfig+0x118>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d023      	beq.n	8001c9a <TIM_Base_SetConfig+0xb2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <TIM_Base_SetConfig+0x11c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d01f      	beq.n	8001c9a <TIM_Base_SetConfig+0xb2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a2a      	ldr	r2, [pc, #168]	; (8001d08 <TIM_Base_SetConfig+0x120>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01b      	beq.n	8001c9a <TIM_Base_SetConfig+0xb2>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a29      	ldr	r2, [pc, #164]	; (8001d0c <TIM_Base_SetConfig+0x124>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d017      	beq.n	8001c9a <TIM_Base_SetConfig+0xb2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a28      	ldr	r2, [pc, #160]	; (8001d10 <TIM_Base_SetConfig+0x128>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <TIM_Base_SetConfig+0xb2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <TIM_Base_SetConfig+0x12c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00f      	beq.n	8001c9a <TIM_Base_SetConfig+0xb2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a26      	ldr	r2, [pc, #152]	; (8001d18 <TIM_Base_SetConfig+0x130>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00b      	beq.n	8001c9a <TIM_Base_SetConfig+0xb2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a25      	ldr	r2, [pc, #148]	; (8001d1c <TIM_Base_SetConfig+0x134>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <TIM_Base_SetConfig+0xb2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a24      	ldr	r2, [pc, #144]	; (8001d20 <TIM_Base_SetConfig+0x138>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d003      	beq.n	8001c9a <TIM_Base_SetConfig+0xb2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <TIM_Base_SetConfig+0x13c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d108      	bne.n	8001cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <TIM_Base_SetConfig+0x114>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d003      	beq.n	8001ce0 <TIM_Base_SetConfig+0xf8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <TIM_Base_SetConfig+0x124>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d103      	bne.n	8001ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	615a      	str	r2, [r3, #20]
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40000800 	.word	0x40000800
 8001d08:	40000c00 	.word	0x40000c00
 8001d0c:	40010400 	.word	0x40010400
 8001d10:	40014000 	.word	0x40014000
 8001d14:	40014400 	.word	0x40014400
 8001d18:	40014800 	.word	0x40014800
 8001d1c:	40001800 	.word	0x40001800
 8001d20:	40001c00 	.word	0x40001c00
 8001d24:	40002000 	.word	0x40002000

08001d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e03f      	b.n	8001de2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe fd4c 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2224      	movs	r2, #36	; 0x24
 8001d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f90b 	bl	8001fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001da8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001db8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b088      	sub	sp, #32
 8001dee:	af02      	add	r7, sp, #8
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4613      	mov	r3, r2
 8001df8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	f040 8083 	bne.w	8001f12 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_UART_Transmit+0x2e>
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e07b      	b.n	8001f14 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_UART_Transmit+0x40>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e074      	b.n	8001f14 <HAL_UART_Transmit+0x12a>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2221      	movs	r2, #33	; 0x21
 8001e3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e40:	f7fe fe1e 	bl	8000a80 <HAL_GetTick>
 8001e44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	88fa      	ldrh	r2, [r7, #6]
 8001e4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	88fa      	ldrh	r2, [r7, #6]
 8001e50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001e5a:	e042      	b.n	8001ee2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e72:	d122      	bne.n	8001eba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2180      	movs	r1, #128	; 0x80
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f84c 	bl	8001f1c <UART_WaitOnFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e042      	b.n	8001f14 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ea0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	3302      	adds	r3, #2
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	e017      	b.n	8001ee2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	e013      	b.n	8001ee2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f829 	bl	8001f1c <UART_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e01f      	b.n	8001f14 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	60ba      	str	r2, [r7, #8]
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1b7      	bne.n	8001e5c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2140      	movs	r1, #64	; 0x40
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f810 	bl	8001f1c <UART_WaitOnFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e006      	b.n	8001f14 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
  }
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f2c:	e02c      	b.n	8001f88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f34:	d028      	beq.n	8001f88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <UART_WaitOnFlagUntilTimeout+0x30>
 8001f3c:	f7fe fda0 	bl	8000a80 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d21d      	bcs.n	8001f88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e00f      	b.n	8001fa8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d0c3      	beq.n	8001f2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb4:	b085      	sub	sp, #20
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001ff2:	f023 030c 	bic.w	r3, r3, #12
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800201e:	f040 818b 	bne.w	8002338 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4ac1      	ldr	r2, [pc, #772]	; (800232c <UART_SetConfig+0x37c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d005      	beq.n	8002038 <UART_SetConfig+0x88>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4abf      	ldr	r2, [pc, #764]	; (8002330 <UART_SetConfig+0x380>)
 8002032:	4293      	cmp	r3, r2
 8002034:	f040 80bd 	bne.w	80021b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002038:	f7ff fc06 	bl	8001848 <HAL_RCC_GetPCLK2Freq>
 800203c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	461d      	mov	r5, r3
 8002042:	f04f 0600 	mov.w	r6, #0
 8002046:	46a8      	mov	r8, r5
 8002048:	46b1      	mov	r9, r6
 800204a:	eb18 0308 	adds.w	r3, r8, r8
 800204e:	eb49 0409 	adc.w	r4, r9, r9
 8002052:	4698      	mov	r8, r3
 8002054:	46a1      	mov	r9, r4
 8002056:	eb18 0805 	adds.w	r8, r8, r5
 800205a:	eb49 0906 	adc.w	r9, r9, r6
 800205e:	f04f 0100 	mov.w	r1, #0
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800206a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800206e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002072:	4688      	mov	r8, r1
 8002074:	4691      	mov	r9, r2
 8002076:	eb18 0005 	adds.w	r0, r8, r5
 800207a:	eb49 0106 	adc.w	r1, r9, r6
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	461d      	mov	r5, r3
 8002084:	f04f 0600 	mov.w	r6, #0
 8002088:	196b      	adds	r3, r5, r5
 800208a:	eb46 0406 	adc.w	r4, r6, r6
 800208e:	461a      	mov	r2, r3
 8002090:	4623      	mov	r3, r4
 8002092:	f7fe f8a5 	bl	80001e0 <__aeabi_uldivmod>
 8002096:	4603      	mov	r3, r0
 8002098:	460c      	mov	r4, r1
 800209a:	461a      	mov	r2, r3
 800209c:	4ba5      	ldr	r3, [pc, #660]	; (8002334 <UART_SetConfig+0x384>)
 800209e:	fba3 2302 	umull	r2, r3, r3, r2
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	461d      	mov	r5, r3
 80020ac:	f04f 0600 	mov.w	r6, #0
 80020b0:	46a9      	mov	r9, r5
 80020b2:	46b2      	mov	sl, r6
 80020b4:	eb19 0309 	adds.w	r3, r9, r9
 80020b8:	eb4a 040a 	adc.w	r4, sl, sl
 80020bc:	4699      	mov	r9, r3
 80020be:	46a2      	mov	sl, r4
 80020c0:	eb19 0905 	adds.w	r9, r9, r5
 80020c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80020c8:	f04f 0100 	mov.w	r1, #0
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020dc:	4689      	mov	r9, r1
 80020de:	4692      	mov	sl, r2
 80020e0:	eb19 0005 	adds.w	r0, r9, r5
 80020e4:	eb4a 0106 	adc.w	r1, sl, r6
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	461d      	mov	r5, r3
 80020ee:	f04f 0600 	mov.w	r6, #0
 80020f2:	196b      	adds	r3, r5, r5
 80020f4:	eb46 0406 	adc.w	r4, r6, r6
 80020f8:	461a      	mov	r2, r3
 80020fa:	4623      	mov	r3, r4
 80020fc:	f7fe f870 	bl	80001e0 <__aeabi_uldivmod>
 8002100:	4603      	mov	r3, r0
 8002102:	460c      	mov	r4, r1
 8002104:	461a      	mov	r2, r3
 8002106:	4b8b      	ldr	r3, [pc, #556]	; (8002334 <UART_SetConfig+0x384>)
 8002108:	fba3 1302 	umull	r1, r3, r3, r2
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	2164      	movs	r1, #100	; 0x64
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	3332      	adds	r3, #50	; 0x32
 800211a:	4a86      	ldr	r2, [pc, #536]	; (8002334 <UART_SetConfig+0x384>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002128:	4498      	add	r8, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	461d      	mov	r5, r3
 800212e:	f04f 0600 	mov.w	r6, #0
 8002132:	46a9      	mov	r9, r5
 8002134:	46b2      	mov	sl, r6
 8002136:	eb19 0309 	adds.w	r3, r9, r9
 800213a:	eb4a 040a 	adc.w	r4, sl, sl
 800213e:	4699      	mov	r9, r3
 8002140:	46a2      	mov	sl, r4
 8002142:	eb19 0905 	adds.w	r9, r9, r5
 8002146:	eb4a 0a06 	adc.w	sl, sl, r6
 800214a:	f04f 0100 	mov.w	r1, #0
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002156:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800215a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800215e:	4689      	mov	r9, r1
 8002160:	4692      	mov	sl, r2
 8002162:	eb19 0005 	adds.w	r0, r9, r5
 8002166:	eb4a 0106 	adc.w	r1, sl, r6
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	461d      	mov	r5, r3
 8002170:	f04f 0600 	mov.w	r6, #0
 8002174:	196b      	adds	r3, r5, r5
 8002176:	eb46 0406 	adc.w	r4, r6, r6
 800217a:	461a      	mov	r2, r3
 800217c:	4623      	mov	r3, r4
 800217e:	f7fe f82f 	bl	80001e0 <__aeabi_uldivmod>
 8002182:	4603      	mov	r3, r0
 8002184:	460c      	mov	r4, r1
 8002186:	461a      	mov	r2, r3
 8002188:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <UART_SetConfig+0x384>)
 800218a:	fba3 1302 	umull	r1, r3, r3, r2
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2164      	movs	r1, #100	; 0x64
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	3332      	adds	r3, #50	; 0x32
 800219c:	4a65      	ldr	r2, [pc, #404]	; (8002334 <UART_SetConfig+0x384>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	f003 0207 	and.w	r2, r3, #7
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4442      	add	r2, r8
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e26f      	b.n	8002692 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021b2:	f7ff fb35 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 80021b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	461d      	mov	r5, r3
 80021bc:	f04f 0600 	mov.w	r6, #0
 80021c0:	46a8      	mov	r8, r5
 80021c2:	46b1      	mov	r9, r6
 80021c4:	eb18 0308 	adds.w	r3, r8, r8
 80021c8:	eb49 0409 	adc.w	r4, r9, r9
 80021cc:	4698      	mov	r8, r3
 80021ce:	46a1      	mov	r9, r4
 80021d0:	eb18 0805 	adds.w	r8, r8, r5
 80021d4:	eb49 0906 	adc.w	r9, r9, r6
 80021d8:	f04f 0100 	mov.w	r1, #0
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021ec:	4688      	mov	r8, r1
 80021ee:	4691      	mov	r9, r2
 80021f0:	eb18 0005 	adds.w	r0, r8, r5
 80021f4:	eb49 0106 	adc.w	r1, r9, r6
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	461d      	mov	r5, r3
 80021fe:	f04f 0600 	mov.w	r6, #0
 8002202:	196b      	adds	r3, r5, r5
 8002204:	eb46 0406 	adc.w	r4, r6, r6
 8002208:	461a      	mov	r2, r3
 800220a:	4623      	mov	r3, r4
 800220c:	f7fd ffe8 	bl	80001e0 <__aeabi_uldivmod>
 8002210:	4603      	mov	r3, r0
 8002212:	460c      	mov	r4, r1
 8002214:	461a      	mov	r2, r3
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <UART_SetConfig+0x384>)
 8002218:	fba3 2302 	umull	r2, r3, r3, r2
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	461d      	mov	r5, r3
 8002226:	f04f 0600 	mov.w	r6, #0
 800222a:	46a9      	mov	r9, r5
 800222c:	46b2      	mov	sl, r6
 800222e:	eb19 0309 	adds.w	r3, r9, r9
 8002232:	eb4a 040a 	adc.w	r4, sl, sl
 8002236:	4699      	mov	r9, r3
 8002238:	46a2      	mov	sl, r4
 800223a:	eb19 0905 	adds.w	r9, r9, r5
 800223e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002242:	f04f 0100 	mov.w	r1, #0
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800224e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002256:	4689      	mov	r9, r1
 8002258:	4692      	mov	sl, r2
 800225a:	eb19 0005 	adds.w	r0, r9, r5
 800225e:	eb4a 0106 	adc.w	r1, sl, r6
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	461d      	mov	r5, r3
 8002268:	f04f 0600 	mov.w	r6, #0
 800226c:	196b      	adds	r3, r5, r5
 800226e:	eb46 0406 	adc.w	r4, r6, r6
 8002272:	461a      	mov	r2, r3
 8002274:	4623      	mov	r3, r4
 8002276:	f7fd ffb3 	bl	80001e0 <__aeabi_uldivmod>
 800227a:	4603      	mov	r3, r0
 800227c:	460c      	mov	r4, r1
 800227e:	461a      	mov	r2, r3
 8002280:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <UART_SetConfig+0x384>)
 8002282:	fba3 1302 	umull	r1, r3, r3, r2
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2164      	movs	r1, #100	; 0x64
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	3332      	adds	r3, #50	; 0x32
 8002294:	4a27      	ldr	r2, [pc, #156]	; (8002334 <UART_SetConfig+0x384>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022a2:	4498      	add	r8, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	461d      	mov	r5, r3
 80022a8:	f04f 0600 	mov.w	r6, #0
 80022ac:	46a9      	mov	r9, r5
 80022ae:	46b2      	mov	sl, r6
 80022b0:	eb19 0309 	adds.w	r3, r9, r9
 80022b4:	eb4a 040a 	adc.w	r4, sl, sl
 80022b8:	4699      	mov	r9, r3
 80022ba:	46a2      	mov	sl, r4
 80022bc:	eb19 0905 	adds.w	r9, r9, r5
 80022c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80022c4:	f04f 0100 	mov.w	r1, #0
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022d8:	4689      	mov	r9, r1
 80022da:	4692      	mov	sl, r2
 80022dc:	eb19 0005 	adds.w	r0, r9, r5
 80022e0:	eb4a 0106 	adc.w	r1, sl, r6
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	461d      	mov	r5, r3
 80022ea:	f04f 0600 	mov.w	r6, #0
 80022ee:	196b      	adds	r3, r5, r5
 80022f0:	eb46 0406 	adc.w	r4, r6, r6
 80022f4:	461a      	mov	r2, r3
 80022f6:	4623      	mov	r3, r4
 80022f8:	f7fd ff72 	bl	80001e0 <__aeabi_uldivmod>
 80022fc:	4603      	mov	r3, r0
 80022fe:	460c      	mov	r4, r1
 8002300:	461a      	mov	r2, r3
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <UART_SetConfig+0x384>)
 8002304:	fba3 1302 	umull	r1, r3, r3, r2
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	2164      	movs	r1, #100	; 0x64
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	3332      	adds	r3, #50	; 0x32
 8002316:	4a07      	ldr	r2, [pc, #28]	; (8002334 <UART_SetConfig+0x384>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	f003 0207 	and.w	r2, r3, #7
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4442      	add	r2, r8
 8002328:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800232a:	e1b2      	b.n	8002692 <UART_SetConfig+0x6e2>
 800232c:	40011000 	.word	0x40011000
 8002330:	40011400 	.word	0x40011400
 8002334:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4ad7      	ldr	r2, [pc, #860]	; (800269c <UART_SetConfig+0x6ec>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d005      	beq.n	800234e <UART_SetConfig+0x39e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4ad6      	ldr	r2, [pc, #856]	; (80026a0 <UART_SetConfig+0x6f0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	f040 80d1 	bne.w	80024f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800234e:	f7ff fa7b 	bl	8001848 <HAL_RCC_GetPCLK2Freq>
 8002352:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	469a      	mov	sl, r3
 8002358:	f04f 0b00 	mov.w	fp, #0
 800235c:	46d0      	mov	r8, sl
 800235e:	46d9      	mov	r9, fp
 8002360:	eb18 0308 	adds.w	r3, r8, r8
 8002364:	eb49 0409 	adc.w	r4, r9, r9
 8002368:	4698      	mov	r8, r3
 800236a:	46a1      	mov	r9, r4
 800236c:	eb18 080a 	adds.w	r8, r8, sl
 8002370:	eb49 090b 	adc.w	r9, r9, fp
 8002374:	f04f 0100 	mov.w	r1, #0
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002380:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002384:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002388:	4688      	mov	r8, r1
 800238a:	4691      	mov	r9, r2
 800238c:	eb1a 0508 	adds.w	r5, sl, r8
 8002390:	eb4b 0609 	adc.w	r6, fp, r9
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4619      	mov	r1, r3
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f04f 0400 	mov.w	r4, #0
 80023a6:	0094      	lsls	r4, r2, #2
 80023a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023ac:	008b      	lsls	r3, r1, #2
 80023ae:	461a      	mov	r2, r3
 80023b0:	4623      	mov	r3, r4
 80023b2:	4628      	mov	r0, r5
 80023b4:	4631      	mov	r1, r6
 80023b6:	f7fd ff13 	bl	80001e0 <__aeabi_uldivmod>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	461a      	mov	r2, r3
 80023c0:	4bb8      	ldr	r3, [pc, #736]	; (80026a4 <UART_SetConfig+0x6f4>)
 80023c2:	fba3 2302 	umull	r2, r3, r3, r2
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	469b      	mov	fp, r3
 80023d0:	f04f 0c00 	mov.w	ip, #0
 80023d4:	46d9      	mov	r9, fp
 80023d6:	46e2      	mov	sl, ip
 80023d8:	eb19 0309 	adds.w	r3, r9, r9
 80023dc:	eb4a 040a 	adc.w	r4, sl, sl
 80023e0:	4699      	mov	r9, r3
 80023e2:	46a2      	mov	sl, r4
 80023e4:	eb19 090b 	adds.w	r9, r9, fp
 80023e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023ec:	f04f 0100 	mov.w	r1, #0
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002400:	4689      	mov	r9, r1
 8002402:	4692      	mov	sl, r2
 8002404:	eb1b 0509 	adds.w	r5, fp, r9
 8002408:	eb4c 060a 	adc.w	r6, ip, sl
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4619      	mov	r1, r3
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	f04f 0400 	mov.w	r4, #0
 800241e:	0094      	lsls	r4, r2, #2
 8002420:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002424:	008b      	lsls	r3, r1, #2
 8002426:	461a      	mov	r2, r3
 8002428:	4623      	mov	r3, r4
 800242a:	4628      	mov	r0, r5
 800242c:	4631      	mov	r1, r6
 800242e:	f7fd fed7 	bl	80001e0 <__aeabi_uldivmod>
 8002432:	4603      	mov	r3, r0
 8002434:	460c      	mov	r4, r1
 8002436:	461a      	mov	r2, r3
 8002438:	4b9a      	ldr	r3, [pc, #616]	; (80026a4 <UART_SetConfig+0x6f4>)
 800243a:	fba3 1302 	umull	r1, r3, r3, r2
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2164      	movs	r1, #100	; 0x64
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	3332      	adds	r3, #50	; 0x32
 800244c:	4a95      	ldr	r2, [pc, #596]	; (80026a4 <UART_SetConfig+0x6f4>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002458:	4498      	add	r8, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	469b      	mov	fp, r3
 800245e:	f04f 0c00 	mov.w	ip, #0
 8002462:	46d9      	mov	r9, fp
 8002464:	46e2      	mov	sl, ip
 8002466:	eb19 0309 	adds.w	r3, r9, r9
 800246a:	eb4a 040a 	adc.w	r4, sl, sl
 800246e:	4699      	mov	r9, r3
 8002470:	46a2      	mov	sl, r4
 8002472:	eb19 090b 	adds.w	r9, r9, fp
 8002476:	eb4a 0a0c 	adc.w	sl, sl, ip
 800247a:	f04f 0100 	mov.w	r1, #0
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002486:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800248a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800248e:	4689      	mov	r9, r1
 8002490:	4692      	mov	sl, r2
 8002492:	eb1b 0509 	adds.w	r5, fp, r9
 8002496:	eb4c 060a 	adc.w	r6, ip, sl
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4619      	mov	r1, r3
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	f04f 0400 	mov.w	r4, #0
 80024ac:	0094      	lsls	r4, r2, #2
 80024ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024b2:	008b      	lsls	r3, r1, #2
 80024b4:	461a      	mov	r2, r3
 80024b6:	4623      	mov	r3, r4
 80024b8:	4628      	mov	r0, r5
 80024ba:	4631      	mov	r1, r6
 80024bc:	f7fd fe90 	bl	80001e0 <__aeabi_uldivmod>
 80024c0:	4603      	mov	r3, r0
 80024c2:	460c      	mov	r4, r1
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b77      	ldr	r3, [pc, #476]	; (80026a4 <UART_SetConfig+0x6f4>)
 80024c8:	fba3 1302 	umull	r1, r3, r3, r2
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	2164      	movs	r1, #100	; 0x64
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	3332      	adds	r3, #50	; 0x32
 80024da:	4a72      	ldr	r2, [pc, #456]	; (80026a4 <UART_SetConfig+0x6f4>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	f003 020f 	and.w	r2, r3, #15
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4442      	add	r2, r8
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	e0d0      	b.n	8002692 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80024f0:	f7ff f996 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 80024f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	469a      	mov	sl, r3
 80024fa:	f04f 0b00 	mov.w	fp, #0
 80024fe:	46d0      	mov	r8, sl
 8002500:	46d9      	mov	r9, fp
 8002502:	eb18 0308 	adds.w	r3, r8, r8
 8002506:	eb49 0409 	adc.w	r4, r9, r9
 800250a:	4698      	mov	r8, r3
 800250c:	46a1      	mov	r9, r4
 800250e:	eb18 080a 	adds.w	r8, r8, sl
 8002512:	eb49 090b 	adc.w	r9, r9, fp
 8002516:	f04f 0100 	mov.w	r1, #0
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002522:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002526:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800252a:	4688      	mov	r8, r1
 800252c:	4691      	mov	r9, r2
 800252e:	eb1a 0508 	adds.w	r5, sl, r8
 8002532:	eb4b 0609 	adc.w	r6, fp, r9
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4619      	mov	r1, r3
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	f04f 0400 	mov.w	r4, #0
 8002548:	0094      	lsls	r4, r2, #2
 800254a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800254e:	008b      	lsls	r3, r1, #2
 8002550:	461a      	mov	r2, r3
 8002552:	4623      	mov	r3, r4
 8002554:	4628      	mov	r0, r5
 8002556:	4631      	mov	r1, r6
 8002558:	f7fd fe42 	bl	80001e0 <__aeabi_uldivmod>
 800255c:	4603      	mov	r3, r0
 800255e:	460c      	mov	r4, r1
 8002560:	461a      	mov	r2, r3
 8002562:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <UART_SetConfig+0x6f4>)
 8002564:	fba3 2302 	umull	r2, r3, r3, r2
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	469b      	mov	fp, r3
 8002572:	f04f 0c00 	mov.w	ip, #0
 8002576:	46d9      	mov	r9, fp
 8002578:	46e2      	mov	sl, ip
 800257a:	eb19 0309 	adds.w	r3, r9, r9
 800257e:	eb4a 040a 	adc.w	r4, sl, sl
 8002582:	4699      	mov	r9, r3
 8002584:	46a2      	mov	sl, r4
 8002586:	eb19 090b 	adds.w	r9, r9, fp
 800258a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800258e:	f04f 0100 	mov.w	r1, #0
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800259a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800259e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025a2:	4689      	mov	r9, r1
 80025a4:	4692      	mov	sl, r2
 80025a6:	eb1b 0509 	adds.w	r5, fp, r9
 80025aa:	eb4c 060a 	adc.w	r6, ip, sl
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4619      	mov	r1, r3
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	f04f 0400 	mov.w	r4, #0
 80025c0:	0094      	lsls	r4, r2, #2
 80025c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025c6:	008b      	lsls	r3, r1, #2
 80025c8:	461a      	mov	r2, r3
 80025ca:	4623      	mov	r3, r4
 80025cc:	4628      	mov	r0, r5
 80025ce:	4631      	mov	r1, r6
 80025d0:	f7fd fe06 	bl	80001e0 <__aeabi_uldivmod>
 80025d4:	4603      	mov	r3, r0
 80025d6:	460c      	mov	r4, r1
 80025d8:	461a      	mov	r2, r3
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <UART_SetConfig+0x6f4>)
 80025dc:	fba3 1302 	umull	r1, r3, r3, r2
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	2164      	movs	r1, #100	; 0x64
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	3332      	adds	r3, #50	; 0x32
 80025ee:	4a2d      	ldr	r2, [pc, #180]	; (80026a4 <UART_SetConfig+0x6f4>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025fa:	4498      	add	r8, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	469b      	mov	fp, r3
 8002600:	f04f 0c00 	mov.w	ip, #0
 8002604:	46d9      	mov	r9, fp
 8002606:	46e2      	mov	sl, ip
 8002608:	eb19 0309 	adds.w	r3, r9, r9
 800260c:	eb4a 040a 	adc.w	r4, sl, sl
 8002610:	4699      	mov	r9, r3
 8002612:	46a2      	mov	sl, r4
 8002614:	eb19 090b 	adds.w	r9, r9, fp
 8002618:	eb4a 0a0c 	adc.w	sl, sl, ip
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002628:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800262c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002630:	4689      	mov	r9, r1
 8002632:	4692      	mov	sl, r2
 8002634:	eb1b 0509 	adds.w	r5, fp, r9
 8002638:	eb4c 060a 	adc.w	r6, ip, sl
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4619      	mov	r1, r3
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	f04f 0400 	mov.w	r4, #0
 800264e:	0094      	lsls	r4, r2, #2
 8002650:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002654:	008b      	lsls	r3, r1, #2
 8002656:	461a      	mov	r2, r3
 8002658:	4623      	mov	r3, r4
 800265a:	4628      	mov	r0, r5
 800265c:	4631      	mov	r1, r6
 800265e:	f7fd fdbf 	bl	80001e0 <__aeabi_uldivmod>
 8002662:	4603      	mov	r3, r0
 8002664:	460c      	mov	r4, r1
 8002666:	461a      	mov	r2, r3
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <UART_SetConfig+0x6f4>)
 800266a:	fba3 1302 	umull	r1, r3, r3, r2
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2164      	movs	r1, #100	; 0x64
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	3332      	adds	r3, #50	; 0x32
 800267c:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <UART_SetConfig+0x6f4>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	f003 020f 	and.w	r2, r3, #15
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4442      	add	r2, r8
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	e7ff      	b.n	8002692 <UART_SetConfig+0x6e2>
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800269c:	40011000 	.word	0x40011000
 80026a0:	40011400 	.word	0x40011400
 80026a4:	51eb851f 	.word	0x51eb851f

080026a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f103 0208 	add.w	r2, r3, #8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f103 0208 	add.w	r2, r3, #8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f103 0208 	add.w	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002702:	b480      	push	{r7}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	601a      	str	r2, [r3, #0]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002760:	d103      	bne.n	800276a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e00c      	b.n	8002784 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3308      	adds	r3, #8
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e002      	b.n	8002778 <vListInsert+0x2e>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	d2f6      	bcs.n	8002772 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6892      	ldr	r2, [r2, #8]
 80027d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6852      	ldr	r2, [r2, #4]
 80027dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d103      	bne.n	80027f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1e5a      	subs	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d109      	bne.n	8002838 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	e7fe      	b.n	8002836 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002838:	f002 fb08 	bl	8004e4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	68f9      	ldr	r1, [r7, #12]
 8002846:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	441a      	add	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	3b01      	subs	r3, #1
 800286a:	68f9      	ldr	r1, [r7, #12]
 800286c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	441a      	add	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	22ff      	movs	r2, #255	; 0xff
 800287c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	22ff      	movs	r2, #255	; 0xff
 8002884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d114      	bne.n	80028b8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01a      	beq.n	80028cc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	3310      	adds	r3, #16
 800289a:	4618      	mov	r0, r3
 800289c:	f001 f82c 	bl	80038f8 <xTaskRemoveFromEventList>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <xQueueGenericReset+0xcc>)
 80028a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	e009      	b.n	80028cc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3310      	adds	r3, #16
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fef3 	bl	80026a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3324      	adds	r3, #36	; 0x24
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff feee 	bl	80026a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028cc:	f002 faec 	bl	8004ea8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028d0:	2301      	movs	r3, #1
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000ed04 	.word	0xe000ed04

080028e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d109      	bne.n	8002908 <xQueueGenericCreate+0x28>
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	e7fe      	b.n	8002906 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e004      	b.n	800291e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3350      	adds	r3, #80	; 0x50
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fbac 	bl	8005080 <pvPortMalloc>
 8002928:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3350      	adds	r3, #80	; 0x50
 8002938:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800293a:	79fa      	ldrb	r2, [r7, #7]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f805 	bl	8002956 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800294c:	69bb      	ldr	r3, [r7, #24]
	}
 800294e:	4618      	mov	r0, r3
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e002      	b.n	8002978 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002984:	2101      	movs	r1, #1
 8002986:	69b8      	ldr	r0, [r7, #24]
 8002988:	f7ff ff42 	bl	8002810 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08e      	sub	sp, #56	; 0x38
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029aa:	2300      	movs	r3, #0
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <xQueueGenericSend+0x30>
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ca:	e7fe      	b.n	80029ca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <xQueueGenericSend+0x3e>
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <xQueueGenericSend+0x42>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <xQueueGenericSend+0x44>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <xQueueGenericSend+0x5c>
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
 80029f6:	e7fe      	b.n	80029f6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d103      	bne.n	8002a06 <xQueueGenericSend+0x6a>
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <xQueueGenericSend+0x6e>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <xQueueGenericSend+0x70>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <xQueueGenericSend+0x88>
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	e7fe      	b.n	8002a22 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a24:	f001 f900 	bl	8003c28 <xTaskGetSchedulerState>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <xQueueGenericSend+0x98>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <xQueueGenericSend+0x9c>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <xQueueGenericSend+0x9e>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <xQueueGenericSend+0xb6>
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	e7fe      	b.n	8002a50 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a52:	f002 f9fb 	bl	8004e4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <xQueueGenericSend+0xcc>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d129      	bne.n	8002abc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a6e:	f000 f9ff 	bl	8002e70 <prvCopyDataToQueue>
 8002a72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d010      	beq.n	8002a9e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	3324      	adds	r3, #36	; 0x24
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 ff39 	bl	80038f8 <xTaskRemoveFromEventList>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a8c:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <xQueueGenericSend+0x1f0>)
 8002a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	e00a      	b.n	8002ab4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002aa4:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <xQueueGenericSend+0x1f0>)
 8002aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ab4:	f002 f9f8 	bl	8004ea8 <vPortExitCritical>
				return pdPASS;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e063      	b.n	8002b84 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ac2:	f002 f9f1 	bl	8004ea8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e05c      	b.n	8002b84 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 ff71 	bl	80039bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ade:	f002 f9e3 	bl	8004ea8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ae2:	f000 fcef 	bl	80034c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ae6:	f002 f9b1 	bl	8004e4c <vPortEnterCritical>
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af6:	d103      	bne.n	8002b00 <xQueueGenericSend+0x164>
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b0c:	d103      	bne.n	8002b16 <xQueueGenericSend+0x17a>
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b16:	f002 f9c7 	bl	8004ea8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b1a:	1d3a      	adds	r2, r7, #4
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 ff60 	bl	80039e8 <xTaskCheckForTimeOut>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d124      	bne.n	8002b78 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b30:	f000 fa96 	bl	8003060 <prvIsQueueFull>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d018      	beq.n	8002b6c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	3310      	adds	r3, #16
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fe8a 	bl	800385c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b4a:	f000 fa21 	bl	8002f90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b4e:	f000 fcc7 	bl	80034e0 <xTaskResumeAll>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f47f af7c 	bne.w	8002a52 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <xQueueGenericSend+0x1f0>)
 8002b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	e772      	b.n	8002a52 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b6e:	f000 fa0f 	bl	8002f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b72:	f000 fcb5 	bl	80034e0 <xTaskResumeAll>
 8002b76:	e76c      	b.n	8002a52 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b7a:	f000 fa09 	bl	8002f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b7e:	f000 fcaf 	bl	80034e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3738      	adds	r7, #56	; 0x38
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	e000ed04 	.word	0xe000ed04

08002b90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08e      	sub	sp, #56	; 0x38
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <xQueueGenericSendFromISR+0x2c>
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	e7fe      	b.n	8002bba <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <xQueueGenericSendFromISR+0x3a>
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <xQueueGenericSendFromISR+0x3e>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <xQueueGenericSendFromISR+0x40>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <xQueueGenericSendFromISR+0x58>
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	623b      	str	r3, [r7, #32]
 8002be6:	e7fe      	b.n	8002be6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d103      	bne.n	8002bf6 <xQueueGenericSendFromISR+0x66>
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <xQueueGenericSendFromISR+0x6a>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <xQueueGenericSendFromISR+0x6c>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <xQueueGenericSendFromISR+0x84>
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	e7fe      	b.n	8002c12 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c14:	f002 f9f6 	bl	8005004 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c18:	f3ef 8211 	mrs	r2, BASEPRI
 8002c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	61ba      	str	r2, [r7, #24]
 8002c2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d302      	bcc.n	8002c46 <xQueueGenericSendFromISR+0xb6>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d12c      	bne.n	8002ca0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c56:	f000 f90b 	bl	8002e70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c62:	d112      	bne.n	8002c8a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d016      	beq.n	8002c9a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	3324      	adds	r3, #36	; 0x24
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fe41 	bl	80038f8 <xTaskRemoveFromEventList>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e007      	b.n	8002c9a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c8e:	3301      	adds	r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	b25a      	sxtb	r2, r3
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c9e:	e001      	b.n	8002ca4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3738      	adds	r7, #56	; 0x38
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <xQueueReceive+0x2e>
	__asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	623b      	str	r3, [r7, #32]
 8002ce4:	e7fe      	b.n	8002ce4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <xQueueReceive+0x3c>
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <xQueueReceive+0x40>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <xQueueReceive+0x42>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <xQueueReceive+0x5a>
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	e7fe      	b.n	8002d10 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d12:	f000 ff89 	bl	8003c28 <xTaskGetSchedulerState>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d102      	bne.n	8002d22 <xQueueReceive+0x6a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <xQueueReceive+0x6e>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <xQueueReceive+0x70>
 8002d26:	2300      	movs	r3, #0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <xQueueReceive+0x88>
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	e7fe      	b.n	8002d3e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d40:	f002 f884 	bl	8004e4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01f      	beq.n	8002d90 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d54:	f000 f8f6 	bl	8002f44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	1e5a      	subs	r2, r3, #1
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00f      	beq.n	8002d88 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	3310      	adds	r3, #16
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fdc3 	bl	80038f8 <xTaskRemoveFromEventList>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d78:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <xQueueReceive+0x1b4>)
 8002d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d88:	f002 f88e 	bl	8004ea8 <vPortExitCritical>
				return pdPASS;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e069      	b.n	8002e64 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d103      	bne.n	8002d9e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d96:	f002 f887 	bl	8004ea8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e062      	b.n	8002e64 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d106      	bne.n	8002db2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002da4:	f107 0310 	add.w	r3, r7, #16
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fe07 	bl	80039bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dae:	2301      	movs	r3, #1
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002db2:	f002 f879 	bl	8004ea8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002db6:	f000 fb85 	bl	80034c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dba:	f002 f847 	bl	8004e4c <vPortEnterCritical>
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dca:	d103      	bne.n	8002dd4 <xQueueReceive+0x11c>
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dda:	b25b      	sxtb	r3, r3
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de0:	d103      	bne.n	8002dea <xQueueReceive+0x132>
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dea:	f002 f85d 	bl	8004ea8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dee:	1d3a      	adds	r2, r7, #4
 8002df0:	f107 0310 	add.w	r3, r7, #16
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fdf6 	bl	80039e8 <xTaskCheckForTimeOut>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d123      	bne.n	8002e4a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e04:	f000 f916 	bl	8003034 <prvIsQueueEmpty>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d017      	beq.n	8002e3e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	3324      	adds	r3, #36	; 0x24
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fd20 	bl	800385c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e1e:	f000 f8b7 	bl	8002f90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e22:	f000 fb5d 	bl	80034e0 <xTaskResumeAll>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d189      	bne.n	8002d40 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <xQueueReceive+0x1b4>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	e780      	b.n	8002d40 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e40:	f000 f8a6 	bl	8002f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e44:	f000 fb4c 	bl	80034e0 <xTaskResumeAll>
 8002e48:	e77a      	b.n	8002d40 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e4c:	f000 f8a0 	bl	8002f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e50:	f000 fb46 	bl	80034e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e56:	f000 f8ed 	bl	8003034 <prvIsQueueEmpty>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f43f af6f 	beq.w	8002d40 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3730      	adds	r7, #48	; 0x30
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	e000ed04 	.word	0xe000ed04

08002e70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10d      	bne.n	8002eaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d14d      	bne.n	8002f32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fee2 	bl	8003c64 <xTaskPriorityDisinherit>
 8002ea0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	e043      	b.n	8002f32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d119      	bne.n	8002ee4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6858      	ldr	r0, [r3, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	f002 fada 	bl	8005474 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	441a      	add	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d32b      	bcc.n	8002f32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	e026      	b.n	8002f32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68d8      	ldr	r0, [r3, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	461a      	mov	r2, r3
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	f002 fac0 	bl	8005474 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	425b      	negs	r3, r3
 8002efe:	441a      	add	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d207      	bcs.n	8002f20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	425b      	negs	r3, r3
 8002f1a:	441a      	add	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d105      	bne.n	8002f32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f3a:	697b      	ldr	r3, [r7, #20]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d018      	beq.n	8002f88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	441a      	add	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d303      	bcc.n	8002f78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68d9      	ldr	r1, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	461a      	mov	r2, r3
 8002f82:	6838      	ldr	r0, [r7, #0]
 8002f84:	f002 fa76 	bl	8005474 <memcpy>
	}
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f98:	f001 ff58 	bl	8004e4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fa4:	e011      	b.n	8002fca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d012      	beq.n	8002fd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3324      	adds	r3, #36	; 0x24
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fca0 	bl	80038f8 <xTaskRemoveFromEventList>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fbe:	f000 fd73 	bl	8003aa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	dce9      	bgt.n	8002fa6 <prvUnlockQueue+0x16>
 8002fd2:	e000      	b.n	8002fd6 <prvUnlockQueue+0x46>
					break;
 8002fd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	22ff      	movs	r2, #255	; 0xff
 8002fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002fde:	f001 ff63 	bl	8004ea8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fe2:	f001 ff33 	bl	8004e4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fee:	e011      	b.n	8003014 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d012      	beq.n	800301e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3310      	adds	r3, #16
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fc7b 	bl	80038f8 <xTaskRemoveFromEventList>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003008:	f000 fd4e 	bl	8003aa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800300c:	7bbb      	ldrb	r3, [r7, #14]
 800300e:	3b01      	subs	r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003018:	2b00      	cmp	r3, #0
 800301a:	dce9      	bgt.n	8002ff0 <prvUnlockQueue+0x60>
 800301c:	e000      	b.n	8003020 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800301e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	22ff      	movs	r2, #255	; 0xff
 8003024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003028:	f001 ff3e 	bl	8004ea8 <vPortExitCritical>
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800303c:	f001 ff06 	bl	8004e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003048:	2301      	movs	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e001      	b.n	8003052 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003052:	f001 ff29 	bl	8004ea8 <vPortExitCritical>

	return xReturn;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003068:	f001 fef0 	bl	8004e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	429a      	cmp	r2, r3
 8003076:	d102      	bne.n	800307e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003078:	2301      	movs	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e001      	b.n	8003082 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003082:	f001 ff11 	bl	8004ea8 <vPortExitCritical>

	return xReturn;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	e014      	b.n	80030ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80030a0:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <vQueueAddToRegistry+0x4c>)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80030ac:	490b      	ldr	r1, [pc, #44]	; (80030dc <vQueueAddToRegistry+0x4c>)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <vQueueAddToRegistry+0x4c>)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030c2:	e005      	b.n	80030d0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3301      	adds	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b07      	cmp	r3, #7
 80030ce:	d9e7      	bls.n	80030a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	20003ed8 	.word	0x20003ed8

080030e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030f0:	f001 feac 	bl	8004e4c <vPortEnterCritical>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030fa:	b25b      	sxtb	r3, r3
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003100:	d103      	bne.n	800310a <vQueueWaitForMessageRestricted+0x2a>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003110:	b25b      	sxtb	r3, r3
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003116:	d103      	bne.n	8003120 <vQueueWaitForMessageRestricted+0x40>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003120:	f001 fec2 	bl	8004ea8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	2b00      	cmp	r3, #0
 800312a:	d106      	bne.n	800313a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3324      	adds	r3, #36	; 0x24
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fbb5 	bl	80038a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800313a:	6978      	ldr	r0, [r7, #20]
 800313c:	f7ff ff28 	bl	8002f90 <prvUnlockQueue>
	}
 8003140:	bf00      	nop
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	; 0x30
 800314c:	af04      	add	r7, sp, #16
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4618      	mov	r0, r3
 800315e:	f001 ff8f 	bl	8005080 <pvPortMalloc>
 8003162:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00e      	beq.n	8003188 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800316a:	205c      	movs	r0, #92	; 0x5c
 800316c:	f001 ff88 	bl	8005080 <pvPortMalloc>
 8003170:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
 800317e:	e005      	b.n	800318c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003180:	6978      	ldr	r0, [r7, #20]
 8003182:	f002 f83f 	bl	8005204 <vPortFree>
 8003186:	e001      	b.n	800318c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d013      	beq.n	80031ba <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	2300      	movs	r3, #0
 8003196:	9303      	str	r3, [sp, #12]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	9302      	str	r3, [sp, #8]
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f80e 	bl	80031ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031ae:	69f8      	ldr	r0, [r7, #28]
 80031b0:	f000 f89a 	bl	80032e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031b4:	2301      	movs	r3, #1
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e002      	b.n	80031c0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031c0:	69bb      	ldr	r3, [r7, #24]
	}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b088      	sub	sp, #32
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	461a      	mov	r2, r3
 80031e2:	21a5      	movs	r1, #165	; 0xa5
 80031e4:	f002 f951 	bl	800548a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031f2:	3b01      	subs	r3, #1
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f023 0307 	bic.w	r3, r3, #7
 8003200:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <prvInitialiseNewTask+0x56>
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e7fe      	b.n	800321e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01f      	beq.n	8003266 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	e012      	b.n	8003252 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	7819      	ldrb	r1, [r3, #0]
 8003234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	3334      	adds	r3, #52	; 0x34
 800323c:	460a      	mov	r2, r1
 800323e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d006      	beq.n	800325a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	3301      	adds	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2b0e      	cmp	r3, #14
 8003256:	d9e9      	bls.n	800322c <prvInitialiseNewTask+0x62>
 8003258:	e000      	b.n	800325c <prvInitialiseNewTask+0x92>
			{
				break;
 800325a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003264:	e003      	b.n	800326e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b0e      	cmp	r3, #14
 8003272:	d901      	bls.n	8003278 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003274:	230e      	movs	r3, #14
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800327c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003282:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	2200      	movs	r2, #0
 8003288:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	3304      	adds	r3, #4
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fa2a 	bl	80026e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	3318      	adds	r3, #24
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fa25 	bl	80026e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	f1c3 020f 	rsb	r2, r3, #15
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	2200      	movs	r2, #0
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	68f9      	ldr	r1, [r7, #12]
 80032c6:	69b8      	ldr	r0, [r7, #24]
 80032c8:	f001 fc86 	bl	8004bd8 <pxPortInitialiseStack>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032de:	bf00      	nop
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032f0:	f001 fdac 	bl	8004e4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032f4:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <prvAddNewTaskToReadyList+0xc0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3301      	adds	r3, #1
 80032fa:	4a2b      	ldr	r2, [pc, #172]	; (80033a8 <prvAddNewTaskToReadyList+0xc0>)
 80032fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032fe:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <prvAddNewTaskToReadyList+0xc4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003306:	4a29      	ldr	r2, [pc, #164]	; (80033ac <prvAddNewTaskToReadyList+0xc4>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800330c:	4b26      	ldr	r3, [pc, #152]	; (80033a8 <prvAddNewTaskToReadyList+0xc0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d110      	bne.n	8003336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003314:	f000 fbec 	bl	8003af0 <prvInitialiseTaskLists>
 8003318:	e00d      	b.n	8003336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <prvAddNewTaskToReadyList+0xc8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003322:	4b22      	ldr	r3, [pc, #136]	; (80033ac <prvAddNewTaskToReadyList+0xc4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	429a      	cmp	r2, r3
 800332e:	d802      	bhi.n	8003336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003330:	4a1e      	ldr	r2, [pc, #120]	; (80033ac <prvAddNewTaskToReadyList+0xc4>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003336:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <prvAddNewTaskToReadyList+0xcc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3301      	adds	r3, #1
 800333c:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <prvAddNewTaskToReadyList+0xcc>)
 800333e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003340:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <prvAddNewTaskToReadyList+0xcc>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	2201      	movs	r2, #1
 800334e:	409a      	lsls	r2, r3
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <prvAddNewTaskToReadyList+0xd0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <prvAddNewTaskToReadyList+0xd0>)
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4a15      	ldr	r2, [pc, #84]	; (80033bc <prvAddNewTaskToReadyList+0xd4>)
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f7ff f9c6 	bl	8002702 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003376:	f001 fd97 	bl	8004ea8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <prvAddNewTaskToReadyList+0xc8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00e      	beq.n	80033a0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <prvAddNewTaskToReadyList+0xc4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	429a      	cmp	r2, r3
 800338e:	d207      	bcs.n	80033a0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <prvAddNewTaskToReadyList+0xd8>)
 8003392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	200001cc 	.word	0x200001cc
 80033ac:	2000002c 	.word	0x2000002c
 80033b0:	200001d8 	.word	0x200001d8
 80033b4:	200001e8 	.word	0x200001e8
 80033b8:	200001d4 	.word	0x200001d4
 80033bc:	20000030 	.word	0x20000030
 80033c0:	e000ed04 	.word	0xe000ed04

080033c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <vTaskDelay+0x60>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <vTaskDelay+0x2e>
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	e7fe      	b.n	80033f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80033f2:	f000 f867 	bl	80034c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033f6:	2100      	movs	r1, #0
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fcb7 	bl	8003d6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033fe:	f000 f86f 	bl	80034e0 <xTaskResumeAll>
 8003402:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <vTaskDelay+0x64>)
 800340c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200001f4 	.word	0x200001f4
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003432:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <vTaskStartScheduler+0x80>)
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2300      	movs	r3, #0
 800343c:	2282      	movs	r2, #130	; 0x82
 800343e:	491c      	ldr	r1, [pc, #112]	; (80034b0 <vTaskStartScheduler+0x84>)
 8003440:	481c      	ldr	r0, [pc, #112]	; (80034b4 <vTaskStartScheduler+0x88>)
 8003442:	f7ff fe81 	bl	8003148 <xTaskCreate>
 8003446:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d102      	bne.n	8003454 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800344e:	f001 f8b5 	bl	80045bc <xTimerCreateTimerTask>
 8003452:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d115      	bne.n	8003486 <vTaskStartScheduler+0x5a>
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <vTaskStartScheduler+0x8c>)
 800346e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003472:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <vTaskStartScheduler+0x90>)
 8003476:	2201      	movs	r2, #1
 8003478:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800347a:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <vTaskStartScheduler+0x94>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003480:	f001 fc36 	bl	8004cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003484:	e00d      	b.n	80034a2 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800348c:	d109      	bne.n	80034a2 <vTaskStartScheduler+0x76>
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	e7fe      	b.n	80034a0 <vTaskStartScheduler+0x74>
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200001f0 	.word	0x200001f0
 80034b0:	08005510 	.word	0x08005510
 80034b4:	08003ac1 	.word	0x08003ac1
 80034b8:	200001ec 	.word	0x200001ec
 80034bc:	200001d8 	.word	0x200001d8
 80034c0:	200001d0 	.word	0x200001d0

080034c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <vTaskSuspendAll+0x18>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3301      	adds	r3, #1
 80034ce:	4a03      	ldr	r2, [pc, #12]	; (80034dc <vTaskSuspendAll+0x18>)
 80034d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	200001f4 	.word	0x200001f4

080034e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <xTaskResumeAll+0x114>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <xTaskResumeAll+0x2a>
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	e7fe      	b.n	8003508 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800350a:	f001 fc9f 	bl	8004e4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800350e:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <xTaskResumeAll+0x114>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3b01      	subs	r3, #1
 8003514:	4a37      	ldr	r2, [pc, #220]	; (80035f4 <xTaskResumeAll+0x114>)
 8003516:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003518:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <xTaskResumeAll+0x114>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d161      	bne.n	80035e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003520:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <xTaskResumeAll+0x118>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d05d      	beq.n	80035e4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003528:	e02e      	b.n	8003588 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800352a:	4b34      	ldr	r3, [pc, #208]	; (80035fc <xTaskResumeAll+0x11c>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3318      	adds	r3, #24
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff f940 	bl	80027bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3304      	adds	r3, #4
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff f93b 	bl	80027bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	2201      	movs	r2, #1
 800354c:	409a      	lsls	r2, r3
 800354e:	4b2c      	ldr	r3, [pc, #176]	; (8003600 <xTaskResumeAll+0x120>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	4a2a      	ldr	r2, [pc, #168]	; (8003600 <xTaskResumeAll+0x120>)
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4a27      	ldr	r2, [pc, #156]	; (8003604 <xTaskResumeAll+0x124>)
 8003566:	441a      	add	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3304      	adds	r3, #4
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f7ff f8c7 	bl	8002702 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	4b23      	ldr	r3, [pc, #140]	; (8003608 <xTaskResumeAll+0x128>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <xTaskResumeAll+0x12c>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003588:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <xTaskResumeAll+0x11c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1cc      	bne.n	800352a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003596:	f000 fb27 	bl	8003be8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <xTaskResumeAll+0x130>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d010      	beq.n	80035c8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035a6:	f000 f847 	bl	8003638 <xTaskIncrementTick>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80035b0:	4b16      	ldr	r3, [pc, #88]	; (800360c <xTaskResumeAll+0x12c>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f1      	bne.n	80035a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80035c2:	4b13      	ldr	r3, [pc, #76]	; (8003610 <xTaskResumeAll+0x130>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <xTaskResumeAll+0x12c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <xTaskResumeAll+0x134>)
 80035d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035e4:	f001 fc60 	bl	8004ea8 <vPortExitCritical>

	return xAlreadyYielded;
 80035e8:	68bb      	ldr	r3, [r7, #8]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200001f4 	.word	0x200001f4
 80035f8:	200001cc 	.word	0x200001cc
 80035fc:	2000018c 	.word	0x2000018c
 8003600:	200001d4 	.word	0x200001d4
 8003604:	20000030 	.word	0x20000030
 8003608:	2000002c 	.word	0x2000002c
 800360c:	200001e0 	.word	0x200001e0
 8003610:	200001dc 	.word	0x200001dc
 8003614:	e000ed04 	.word	0xe000ed04

08003618 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <xTaskGetTickCount+0x1c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003624:	687b      	ldr	r3, [r7, #4]
}
 8003626:	4618      	mov	r0, r3
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	200001d0 	.word	0x200001d0

08003638 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003642:	4b4e      	ldr	r3, [pc, #312]	; (800377c <xTaskIncrementTick+0x144>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 8087 	bne.w	800375a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800364c:	4b4c      	ldr	r3, [pc, #304]	; (8003780 <xTaskIncrementTick+0x148>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003654:	4a4a      	ldr	r2, [pc, #296]	; (8003780 <xTaskIncrementTick+0x148>)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d11f      	bne.n	80036a0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003660:	4b48      	ldr	r3, [pc, #288]	; (8003784 <xTaskIncrementTick+0x14c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <xTaskIncrementTick+0x46>
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	e7fe      	b.n	800367c <xTaskIncrementTick+0x44>
 800367e:	4b41      	ldr	r3, [pc, #260]	; (8003784 <xTaskIncrementTick+0x14c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	4b40      	ldr	r3, [pc, #256]	; (8003788 <xTaskIncrementTick+0x150>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a3e      	ldr	r2, [pc, #248]	; (8003784 <xTaskIncrementTick+0x14c>)
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4a3e      	ldr	r2, [pc, #248]	; (8003788 <xTaskIncrementTick+0x150>)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b3e      	ldr	r3, [pc, #248]	; (800378c <xTaskIncrementTick+0x154>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	4a3c      	ldr	r2, [pc, #240]	; (800378c <xTaskIncrementTick+0x154>)
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	f000 faa4 	bl	8003be8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036a0:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <xTaskIncrementTick+0x158>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d348      	bcc.n	800373c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036aa:	4b36      	ldr	r3, [pc, #216]	; (8003784 <xTaskIncrementTick+0x14c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b4:	4b36      	ldr	r3, [pc, #216]	; (8003790 <xTaskIncrementTick+0x158>)
 80036b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ba:	601a      	str	r2, [r3, #0]
					break;
 80036bc:	e03e      	b.n	800373c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036be:	4b31      	ldr	r3, [pc, #196]	; (8003784 <xTaskIncrementTick+0x14c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d203      	bcs.n	80036de <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036d6:	4a2e      	ldr	r2, [pc, #184]	; (8003790 <xTaskIncrementTick+0x158>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036dc:	e02e      	b.n	800373c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3304      	adds	r3, #4
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff f86a 	bl	80027bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d004      	beq.n	80036fa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	3318      	adds	r3, #24
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f861 	bl	80027bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	2201      	movs	r2, #1
 8003700:	409a      	lsls	r2, r3
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <xTaskIncrementTick+0x15c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4313      	orrs	r3, r2
 8003708:	4a22      	ldr	r2, [pc, #136]	; (8003794 <xTaskIncrementTick+0x15c>)
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <xTaskIncrementTick+0x160>)
 800371a:	441a      	add	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3304      	adds	r3, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f7fe ffed 	bl	8002702 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <xTaskIncrementTick+0x164>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	429a      	cmp	r2, r3
 8003734:	d3b9      	bcc.n	80036aa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003736:	2301      	movs	r3, #1
 8003738:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800373a:	e7b6      	b.n	80036aa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800373c:	4b17      	ldr	r3, [pc, #92]	; (800379c <xTaskIncrementTick+0x164>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003742:	4915      	ldr	r1, [pc, #84]	; (8003798 <xTaskIncrementTick+0x160>)
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d907      	bls.n	8003764 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003754:	2301      	movs	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e004      	b.n	8003764 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <xTaskIncrementTick+0x168>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3301      	adds	r3, #1
 8003760:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <xTaskIncrementTick+0x168>)
 8003762:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <xTaskIncrementTick+0x16c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800376c:	2301      	movs	r3, #1
 800376e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003770:	697b      	ldr	r3, [r7, #20]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	200001f4 	.word	0x200001f4
 8003780:	200001d0 	.word	0x200001d0
 8003784:	20000184 	.word	0x20000184
 8003788:	20000188 	.word	0x20000188
 800378c:	200001e4 	.word	0x200001e4
 8003790:	200001ec 	.word	0x200001ec
 8003794:	200001d4 	.word	0x200001d4
 8003798:	20000030 	.word	0x20000030
 800379c:	2000002c 	.word	0x2000002c
 80037a0:	200001dc 	.word	0x200001dc
 80037a4:	200001e0 	.word	0x200001e0

080037a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037ae:	4b26      	ldr	r3, [pc, #152]	; (8003848 <vTaskSwitchContext+0xa0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037b6:	4b25      	ldr	r3, [pc, #148]	; (800384c <vTaskSwitchContext+0xa4>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037bc:	e03e      	b.n	800383c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80037be:	4b23      	ldr	r3, [pc, #140]	; (800384c <vTaskSwitchContext+0xa4>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c4:	4b22      	ldr	r3, [pc, #136]	; (8003850 <vTaskSwitchContext+0xa8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80037d2:	7afb      	ldrb	r3, [r7, #11]
 80037d4:	f1c3 031f 	rsb	r3, r3, #31
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	491e      	ldr	r1, [pc, #120]	; (8003854 <vTaskSwitchContext+0xac>)
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <vTaskSwitchContext+0x5a>
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	e7fe      	b.n	8003800 <vTaskSwitchContext+0x58>
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4a11      	ldr	r2, [pc, #68]	; (8003854 <vTaskSwitchContext+0xac>)
 800380e:	4413      	add	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	3308      	adds	r3, #8
 8003824:	429a      	cmp	r2, r3
 8003826:	d104      	bne.n	8003832 <vTaskSwitchContext+0x8a>
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4a07      	ldr	r2, [pc, #28]	; (8003858 <vTaskSwitchContext+0xb0>)
 800383a:	6013      	str	r3, [r2, #0]
}
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	200001f4 	.word	0x200001f4
 800384c:	200001e0 	.word	0x200001e0
 8003850:	200001d4 	.word	0x200001d4
 8003854:	20000030 	.word	0x20000030
 8003858:	2000002c 	.word	0x2000002c

0800385c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <vTaskPlaceOnEventList+0x24>
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e7fe      	b.n	800387e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003880:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <vTaskPlaceOnEventList+0x44>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3318      	adds	r3, #24
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fe ff5e 	bl	800274a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800388e:	2101      	movs	r1, #1
 8003890:	6838      	ldr	r0, [r7, #0]
 8003892:	f000 fa6b 	bl	8003d6c <prvAddCurrentTaskToDelayedList>
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	2000002c 	.word	0x2000002c

080038a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <vTaskPlaceOnEventListRestricted+0x26>
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e7fe      	b.n	80038c8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <vTaskPlaceOnEventListRestricted+0x50>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3318      	adds	r3, #24
 80038d0:	4619      	mov	r1, r3
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f7fe ff15 	bl	8002702 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	68b8      	ldr	r0, [r7, #8]
 80038e8:	f000 fa40 	bl	8003d6c <prvAddCurrentTaskToDelayedList>
	}
 80038ec:	bf00      	nop
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	2000002c 	.word	0x2000002c

080038f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <xTaskRemoveFromEventList+0x2a>
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	e7fe      	b.n	8003920 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	3318      	adds	r3, #24
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe ff48 	bl	80027bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800392c:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <xTaskRemoveFromEventList+0xac>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11c      	bne.n	800396e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	3304      	adds	r3, #4
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe ff3f 	bl	80027bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	2201      	movs	r2, #1
 8003944:	409a      	lsls	r2, r3
 8003946:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <xTaskRemoveFromEventList+0xb0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4313      	orrs	r3, r2
 800394c:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <xTaskRemoveFromEventList+0xb0>)
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4a13      	ldr	r2, [pc, #76]	; (80039ac <xTaskRemoveFromEventList+0xb4>)
 800395e:	441a      	add	r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	3304      	adds	r3, #4
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f7fe fecb 	bl	8002702 <vListInsertEnd>
 800396c:	e005      	b.n	800397a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	3318      	adds	r3, #24
 8003972:	4619      	mov	r1, r3
 8003974:	480e      	ldr	r0, [pc, #56]	; (80039b0 <xTaskRemoveFromEventList+0xb8>)
 8003976:	f7fe fec4 	bl	8002702 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <xTaskRemoveFromEventList+0xbc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	429a      	cmp	r2, r3
 8003986:	d905      	bls.n	8003994 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003988:	2301      	movs	r3, #1
 800398a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <xTaskRemoveFromEventList+0xc0>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	e001      	b.n	8003998 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003998:	697b      	ldr	r3, [r7, #20]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200001f4 	.word	0x200001f4
 80039a8:	200001d4 	.word	0x200001d4
 80039ac:	20000030 	.word	0x20000030
 80039b0:	2000018c 	.word	0x2000018c
 80039b4:	2000002c 	.word	0x2000002c
 80039b8:	200001e0 	.word	0x200001e0

080039bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <vTaskInternalSetTimeOutState+0x24>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <vTaskInternalSetTimeOutState+0x28>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	605a      	str	r2, [r3, #4]
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	200001e4 	.word	0x200001e4
 80039e4:	200001d0 	.word	0x200001d0

080039e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <xTaskCheckForTimeOut+0x24>
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	e7fe      	b.n	8003a0a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <xTaskCheckForTimeOut+0x3e>
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e7fe      	b.n	8003a24 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003a26:	f001 fa11 	bl	8004e4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <xTaskCheckForTimeOut+0xb8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a42:	d102      	bne.n	8003a4a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	e023      	b.n	8003a92 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b15      	ldr	r3, [pc, #84]	; (8003aa4 <xTaskCheckForTimeOut+0xbc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d007      	beq.n	8003a66 <xTaskCheckForTimeOut+0x7e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d302      	bcc.n	8003a66 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e015      	b.n	8003a92 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d20b      	bcs.n	8003a88 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	1ad2      	subs	r2, r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff9d 	bl	80039bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	e004      	b.n	8003a92 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a92:	f001 fa09 	bl	8004ea8 <vPortExitCritical>

	return xReturn;
 8003a96:	69fb      	ldr	r3, [r7, #28]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	200001d0 	.word	0x200001d0
 8003aa4:	200001e4 	.word	0x200001e4

08003aa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003aac:	4b03      	ldr	r3, [pc, #12]	; (8003abc <vTaskMissedYield+0x14>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	200001e0 	.word	0x200001e0

08003ac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ac8:	f000 f852 	bl	8003b70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <prvIdleTask+0x28>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d9f9      	bls.n	8003ac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <prvIdleTask+0x2c>)
 8003ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ae4:	e7f0      	b.n	8003ac8 <prvIdleTask+0x8>
 8003ae6:	bf00      	nop
 8003ae8:	20000030 	.word	0x20000030
 8003aec:	e000ed04 	.word	0xe000ed04

08003af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003af6:	2300      	movs	r3, #0
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	e00c      	b.n	8003b16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <prvInitialiseTaskLists+0x60>)
 8003b08:	4413      	add	r3, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fdcc 	bl	80026a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3301      	adds	r3, #1
 8003b14:	607b      	str	r3, [r7, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b0e      	cmp	r3, #14
 8003b1a:	d9ef      	bls.n	8003afc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b1c:	480d      	ldr	r0, [pc, #52]	; (8003b54 <prvInitialiseTaskLists+0x64>)
 8003b1e:	f7fe fdc3 	bl	80026a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b22:	480d      	ldr	r0, [pc, #52]	; (8003b58 <prvInitialiseTaskLists+0x68>)
 8003b24:	f7fe fdc0 	bl	80026a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b28:	480c      	ldr	r0, [pc, #48]	; (8003b5c <prvInitialiseTaskLists+0x6c>)
 8003b2a:	f7fe fdbd 	bl	80026a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b2e:	480c      	ldr	r0, [pc, #48]	; (8003b60 <prvInitialiseTaskLists+0x70>)
 8003b30:	f7fe fdba 	bl	80026a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b34:	480b      	ldr	r0, [pc, #44]	; (8003b64 <prvInitialiseTaskLists+0x74>)
 8003b36:	f7fe fdb7 	bl	80026a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <prvInitialiseTaskLists+0x78>)
 8003b3c:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <prvInitialiseTaskLists+0x64>)
 8003b3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <prvInitialiseTaskLists+0x7c>)
 8003b42:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <prvInitialiseTaskLists+0x68>)
 8003b44:	601a      	str	r2, [r3, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000030 	.word	0x20000030
 8003b54:	2000015c 	.word	0x2000015c
 8003b58:	20000170 	.word	0x20000170
 8003b5c:	2000018c 	.word	0x2000018c
 8003b60:	200001a0 	.word	0x200001a0
 8003b64:	200001b8 	.word	0x200001b8
 8003b68:	20000184 	.word	0x20000184
 8003b6c:	20000188 	.word	0x20000188

08003b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b76:	e019      	b.n	8003bac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b78:	f001 f968 	bl	8004e4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <prvCheckTasksWaitingTermination+0x4c>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe fe17 	bl	80027bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <prvCheckTasksWaitingTermination+0x50>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <prvCheckTasksWaitingTermination+0x50>)
 8003b96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <prvCheckTasksWaitingTermination+0x54>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <prvCheckTasksWaitingTermination+0x54>)
 8003ba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ba2:	f001 f981 	bl	8004ea8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f80e 	bl	8003bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <prvCheckTasksWaitingTermination+0x54>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e1      	bne.n	8003b78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	200001a0 	.word	0x200001a0
 8003bc0:	200001cc 	.word	0x200001cc
 8003bc4:	200001b4 	.word	0x200001b4

08003bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 fb15 	bl	8005204 <vPortFree>
			vPortFree( pxTCB );
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f001 fb12 	bl	8005204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <prvResetNextTaskUnblockTime+0x38>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d104      	bne.n	8003c02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <prvResetNextTaskUnblockTime+0x3c>)
 8003bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c00:	e008      	b.n	8003c14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c02:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <prvResetNextTaskUnblockTime+0x38>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <prvResetNextTaskUnblockTime+0x3c>)
 8003c12:	6013      	str	r3, [r2, #0]
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	20000184 	.word	0x20000184
 8003c24:	200001ec 	.word	0x200001ec

08003c28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <xTaskGetSchedulerState+0x34>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c36:	2301      	movs	r3, #1
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	e008      	b.n	8003c4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <xTaskGetSchedulerState+0x38>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c44:	2302      	movs	r3, #2
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	e001      	b.n	8003c4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c4e:	687b      	ldr	r3, [r7, #4]
	}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	200001d8 	.word	0x200001d8
 8003c60:	200001f4 	.word	0x200001f4

08003c64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d06c      	beq.n	8003d54 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c7a:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <xTaskPriorityDisinherit+0xfc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d009      	beq.n	8003c98 <xTaskPriorityDisinherit+0x34>
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e7fe      	b.n	8003c96 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <xTaskPriorityDisinherit+0x50>
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	e7fe      	b.n	8003cb2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb8:	1e5a      	subs	r2, r3, #1
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d044      	beq.n	8003d54 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d140      	bne.n	8003d54 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fd70 	bl	80027bc <uxListRemove>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d115      	bne.n	8003d0e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce6:	491f      	ldr	r1, [pc, #124]	; (8003d64 <xTaskPriorityDisinherit+0x100>)
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <xTaskPriorityDisinherit+0xaa>
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43da      	mvns	r2, r3
 8003d04:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <xTaskPriorityDisinherit+0x104>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	4a17      	ldr	r2, [pc, #92]	; (8003d68 <xTaskPriorityDisinherit+0x104>)
 8003d0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	f1c3 020f 	rsb	r2, r3, #15
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	2201      	movs	r2, #1
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <xTaskPriorityDisinherit+0x104>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <xTaskPriorityDisinherit+0x104>)
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <xTaskPriorityDisinherit+0x100>)
 8003d42:	441a      	add	r2, r3
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f7fe fcd9 	bl	8002702 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d54:	697b      	ldr	r3, [r7, #20]
	}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	2000002c 	.word	0x2000002c
 8003d64:	20000030 	.word	0x20000030
 8003d68:	200001d4 	.word	0x200001d4

08003d6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3304      	adds	r3, #4
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fd1a 	bl	80027bc <uxListRemove>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10b      	bne.n	8003da6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d8e:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	2201      	movs	r2, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4013      	ands	r3, r2
 8003da2:	4a20      	ldr	r2, [pc, #128]	; (8003e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003da4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dac:	d10a      	bne.n	8003dc4 <prvAddCurrentTaskToDelayedList+0x58>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003db4:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4619      	mov	r1, r3
 8003dbc:	481a      	ldr	r0, [pc, #104]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003dbe:	f7fe fca0 	bl	8002702 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003dc2:	e026      	b.n	8003e12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dcc:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d209      	bcs.n	8003df0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ddc:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7fe fcae 	bl	800274a <vListInsert>
}
 8003dee:	e010      	b.n	8003e12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f7fe fca4 	bl	800274a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d202      	bcs.n	8003e12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e0c:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	6013      	str	r3, [r2, #0]
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200001d0 	.word	0x200001d0
 8003e20:	2000002c 	.word	0x2000002c
 8003e24:	200001d4 	.word	0x200001d4
 8003e28:	200001b8 	.word	0x200001b8
 8003e2c:	20000188 	.word	0x20000188
 8003e30:	20000184 	.word	0x20000184
 8003e34:	200001ec 	.word	0x200001ec

08003e38 <Taskmonitor>:
		}
	#endif

#endif

void Taskmonitor(void){
 8003e38:	b5b0      	push	{r4, r5, r7, lr}
 8003e3a:	b0bc      	sub	sp, #240	; 0xf0
 8003e3c:	af00      	add	r7, sp, #0
	char TxTaskInfo[] = "Name      |Priority(Base/actual) |pxStack      |pxTopOfStack      |State \n\r";
 8003e3e:	4a9d      	ldr	r2, [pc, #628]	; (80040b4 <Taskmonitor+0x27c>)
 8003e40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e44:	4611      	mov	r1, r2
 8003e46:	224c      	movs	r2, #76	; 0x4c
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 fb13 	bl	8005474 <memcpy>
	HAL_UART_Transmit(&huart2,(uint8_t *)TxTaskInfo,sizeof(TxTaskInfo),0xffff);
 8003e4e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e56:	224c      	movs	r2, #76	; 0x4c
 8003e58:	4897      	ldr	r0, [pc, #604]	; (80040b8 <Taskmonitor+0x280>)
 8003e5a:	f7fd ffc6 	bl	8001dea <HAL_UART_Transmit>
	char charTxScanTaskName[configMAX_TASK_NAME_LEN+1];
	char charTxScanTaskPriority[25];
	char charTxScanTaskStartStack[15];
	char charTxScanTaskTopStack[20];
	char charState[2][10] = {"Ready \n\r","Blocked \n\r"};
 8003e5e:	4b97      	ldr	r3, [pc, #604]	; (80040bc <Taskmonitor+0x284>)
 8003e60:	f107 0414 	add.w	r4, r7, #20
 8003e64:	461d      	mov	r5, r3
 8003e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e6a:	682b      	ldr	r3, [r5, #0]
 8003e6c:	6023      	str	r3, [r4, #0]

	volatile int xPriority = uxTopReadyPriority;
 8003e6e:	4b94      	ldr	r3, [pc, #592]	; (80040c0 <Taskmonitor+0x288>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	613b      	str	r3, [r7, #16]
	volatile int TxScanListNumOfItem;
	volatile StackType_t *pStartStack;
	volatile StackType_t *pxTopStack;
	ListItem_t *pxScanItem;
	//ListItem_t *Item;
	TCB_t *pxScanTCB = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	TCB_t *pxDelayTCB = NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	ListItem_t *pxItem = NULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	volatile UBaseType_t TxScanTaskPriority;
	int priorityIndex = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
		for(xPriority;xPriority>=0;){
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	e0fd      	b.n	800408a <Taskmonitor+0x252>
			if(listLIST_IS_EMPTY(&(pxReadyTasksLists[xPriority]))){
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	498c      	ldr	r1, [pc, #560]	; (80040c4 <Taskmonitor+0x28c>)
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d111      	bne.n	8003ec6 <Taskmonitor+0x8e>
				configASSERT( xPriority );
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10a      	bne.n	8003ebe <Taskmonitor+0x86>
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ebc:	e7fe      	b.n	8003ebc <Taskmonitor+0x84>
				--xPriority;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	613b      	str	r3, [r7, #16]
				continue;
 8003ec4:	e0e1      	b.n	800408a <Taskmonitor+0x252>
			}
			TxScanListNumOfItem = listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[xPriority]));
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	497e      	ldr	r1, [pc, #504]	; (80040c4 <Taskmonitor+0x28c>)
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
			pxScanItem = listGET_ITEM_OF_HEAD_ENTRY(&(pxReadyTasksLists[xPriority]));
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	497a      	ldr	r1, [pc, #488]	; (80040c4 <Taskmonitor+0x28c>)
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			for(TxScanListNumOfItem;TxScanListNumOfItem>0;){
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	e0b3      	b.n	800405a <Taskmonitor+0x222>
				priorityIndex = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
				pxScanTCB = pxScanItem->pvOwner;
 8003ef6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
//				Item = &(pxScanTCB->xStateListItem);
//				pxTCB = Item->pvOwner;
				//listGET_OWNER_OF_NEXT_ENTRY( pxScanTCB,);//get pvOwner
				memset(charTxScanTaskName,32,sizeof(charTxScanTaskName));
 8003f00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f04:	2210      	movs	r2, #16
 8003f06:	2120      	movs	r1, #32
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f001 fabe 	bl	800548a <memset>
				strncpy(charTxScanTaskName,pxScanTCB->pcTaskName,strlen(pxScanTCB->pcTaskName));
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f12:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	3334      	adds	r3, #52	; 0x34
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fc f957 	bl	80001d0 <strlen>
 8003f22:	4602      	mov	r2, r0
 8003f24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 fab5 	bl	800549a <strncpy>
				HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskName,sizeof(charTxScanTaskName),0xffff);
 8003f30:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f38:	2210      	movs	r2, #16
 8003f3a:	485f      	ldr	r0, [pc, #380]	; (80040b8 <Taskmonitor+0x280>)
 8003f3c:	f7fd ff55 	bl	8001dea <HAL_UART_Transmit>

				TxScanTaskPriority = pxScanTCB->uxPriority;
 8003f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	60bb      	str	r3, [r7, #8]
				memset(charTxScanTaskPriority,32,sizeof(charTxScanTaskPriority));
 8003f48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f4c:	2219      	movs	r2, #25
 8003f4e:	2120      	movs	r1, #32
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 fa9a 	bl	800548a <memset>
				LongConvertCharArray(TxScanTaskPriority,&(charTxScanTaskPriority[0]),&(priorityIndex));
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	1d3a      	adds	r2, r7, #4
 8003f5a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fa42 	bl	80043e8 <LongConvertCharArray>
				strcat(charTxScanTaskPriority,"/");
 8003f64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fc f931 	bl	80001d0 <strlen>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	461a      	mov	r2, r3
 8003f72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f76:	4413      	add	r3, r2
 8003f78:	4953      	ldr	r1, [pc, #332]	; (80040c8 <Taskmonitor+0x290>)
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	8013      	strh	r3, [r2, #0]
				priorityIndex++;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3301      	adds	r3, #1
 8003f86:	607b      	str	r3, [r7, #4]
				TxScanTaskPriority = pxScanTCB->uxBasePriority;
 8003f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	60bb      	str	r3, [r7, #8]
				LongConvertCharArray(TxScanTaskPriority,&(charTxScanTaskPriority[0]),&(priorityIndex));
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1d3a      	adds	r2, r7, #4
 8003f94:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fa25 	bl	80043e8 <LongConvertCharArray>
				HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskPriority,sizeof(charTxScanTaskPriority),0xffff);
 8003f9e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fa6:	2219      	movs	r2, #25
 8003fa8:	4843      	ldr	r0, [pc, #268]	; (80040b8 <Taskmonitor+0x280>)
 8003faa:	f7fd ff1e 	bl	8001dea <HAL_UART_Transmit>

				pStartStack = pxScanTCB->pxStack;
 8003fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				memset(charTxScanTaskStartStack,32,sizeof(charTxScanTaskStartStack));
 8003fb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fbc:	220f      	movs	r2, #15
 8003fbe:	2120      	movs	r1, #32
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 fa62 	bl	800548a <memset>
				Uint32ConvertHex(pStartStack,&(charTxScanTaskStartStack[0]));
 8003fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fa7f 	bl	80044d4 <Uint32ConvertHex>
				HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskStartStack,sizeof(charTxScanTaskStartStack),0xffff);
 8003fd6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fde:	220f      	movs	r2, #15
 8003fe0:	4835      	ldr	r0, [pc, #212]	; (80040b8 <Taskmonitor+0x280>)
 8003fe2:	f7fd ff02 	bl	8001dea <HAL_UART_Transmit>

				pxTopStack = pxScanTCB->pxTopOfStack;
 8003fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				memset(charTxScanTaskTopStack,32,sizeof(charTxScanTaskTopStack));
 8003ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ff4:	2214      	movs	r2, #20
 8003ff6:	2120      	movs	r1, #32
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 fa46 	bl	800548a <memset>
				Uint32ConvertHex(pxTopStack,&(charTxScanTaskTopStack[0]));
 8003ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004002:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fa63 	bl	80044d4 <Uint32ConvertHex>
//				strcat(charTxScanTaskTopStack,"\n");
//				strcat(charTxScanTaskTopStack,"\r");
				HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskTopStack,sizeof(charTxScanTaskTopStack),0xffff);
 800400e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004016:	2214      	movs	r2, #20
 8004018:	4827      	ldr	r0, [pc, #156]	; (80040b8 <Taskmonitor+0x280>)
 800401a:	f7fd fee6 	bl	8001dea <HAL_UART_Transmit>

				HAL_UART_Transmit(&huart2,(uint8_t *)charState[0],sizeof(charState[0]),0xffff);
 800401e:	f107 0114 	add.w	r1, r7, #20
 8004022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004026:	220a      	movs	r2, #10
 8004028:	4823      	ldr	r0, [pc, #140]	; (80040b8 <Taskmonitor+0x280>)
 800402a:	f7fd fede 	bl	8001dea <HAL_UART_Transmit>
				configASSERT(TxScanListNumOfItem );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <Taskmonitor+0x212>
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004048:	e7fe      	b.n	8004048 <Taskmonitor+0x210>
				--TxScanListNumOfItem;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3b01      	subs	r3, #1
 800404e:	60fb      	str	r3, [r7, #12]
				pxScanItem = pxScanItem->pxNext;
 8004050:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			for(TxScanListNumOfItem;TxScanListNumOfItem>0;){
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f73f af48 	bgt.w	8003ef2 <Taskmonitor+0xba>
			}
			if(xPriority == 0)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <Taskmonitor+0x25c>
				break;
			configASSERT( xPriority );
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <Taskmonitor+0x24c>
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004082:	e7fe      	b.n	8004082 <Taskmonitor+0x24a>
			--xPriority;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	3b01      	subs	r3, #1
 8004088:	613b      	str	r3, [r7, #16]
		for(xPriority;xPriority>=0;){
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f6bf aefe 	bge.w	8003e8e <Taskmonitor+0x56>
 8004092:	e000      	b.n	8004096 <Taskmonitor+0x25e>
				break;
 8004094:	bf00      	nop
		}
		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of
		the	same priority get an equal share of the processor time. */
		TxScanListNumOfItem = xDelayedTaskList1.uxNumberOfItems;
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <Taskmonitor+0x294>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]
		pxItem = listGET_ITEM_OF_HEAD_ENTRY(&(xDelayedTaskList1));
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <Taskmonitor+0x294>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		pxDelayTCB = pxItem->pvOwner;
 80040a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		for(TxScanListNumOfItem;TxScanListNumOfItem>0;){
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	e0c4      	b.n	800423c <Taskmonitor+0x404>
 80040b2:	bf00      	nop
 80040b4:	0800551c 	.word	0x0800551c
 80040b8:	20003e54 	.word	0x20003e54
 80040bc:	08005568 	.word	0x08005568
 80040c0:	200001d4 	.word	0x200001d4
 80040c4:	20000030 	.word	0x20000030
 80040c8:	08005518 	.word	0x08005518
 80040cc:	2000015c 	.word	0x2000015c
			priorityIndex = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	607b      	str	r3, [r7, #4]
			pxDelayTCB = pxItem->pvOwner;
 80040d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			memset(charTxScanTaskName,32,sizeof(charTxScanTaskName));
 80040de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040e2:	2210      	movs	r2, #16
 80040e4:	2120      	movs	r1, #32
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 f9cf 	bl	800548a <memset>
			strncpy(charTxScanTaskName,pxDelayTCB->pcTaskName,strlen(pxDelayTCB->pcTaskName));
 80040ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80040f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f8:	3334      	adds	r3, #52	; 0x34
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fc f868 	bl	80001d0 <strlen>
 8004100:	4602      	mov	r2, r0
 8004102:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004106:	4621      	mov	r1, r4
 8004108:	4618      	mov	r0, r3
 800410a:	f001 f9c6 	bl	800549a <strncpy>
			HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskName,sizeof(charTxScanTaskName),0xffff);
 800410e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004116:	2210      	movs	r2, #16
 8004118:	48b0      	ldr	r0, [pc, #704]	; (80043dc <Taskmonitor+0x5a4>)
 800411a:	f7fd fe66 	bl	8001dea <HAL_UART_Transmit>

			TxScanTaskPriority = pxDelayTCB->uxPriority;
 800411e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	60bb      	str	r3, [r7, #8]
			memset(charTxScanTaskPriority,32,sizeof(charTxScanTaskPriority));
 8004126:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800412a:	2219      	movs	r2, #25
 800412c:	2120      	movs	r1, #32
 800412e:	4618      	mov	r0, r3
 8004130:	f001 f9ab 	bl	800548a <memset>
			LongConvertCharArray(TxScanTaskPriority,&(charTxScanTaskPriority[0]),&(priorityIndex));
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	1d3a      	adds	r2, r7, #4
 8004138:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800413c:	4618      	mov	r0, r3
 800413e:	f000 f953 	bl	80043e8 <LongConvertCharArray>
			strcat(charTxScanTaskPriority,"/");
 8004142:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004146:	4618      	mov	r0, r3
 8004148:	f7fc f842 	bl	80001d0 <strlen>
 800414c:	4603      	mov	r3, r0
 800414e:	461a      	mov	r2, r3
 8004150:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004154:	4413      	add	r3, r2
 8004156:	49a2      	ldr	r1, [pc, #648]	; (80043e0 <Taskmonitor+0x5a8>)
 8004158:	461a      	mov	r2, r3
 800415a:	460b      	mov	r3, r1
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	8013      	strh	r3, [r2, #0]
			priorityIndex++;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3301      	adds	r3, #1
 8004164:	607b      	str	r3, [r7, #4]
			TxScanTaskPriority = pxDelayTCB->uxBasePriority;
 8004166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416c:	60bb      	str	r3, [r7, #8]
			LongConvertCharArray(TxScanTaskPriority,&(charTxScanTaskPriority[0]),&(priorityIndex));
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	1d3a      	adds	r2, r7, #4
 8004172:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f936 	bl	80043e8 <LongConvertCharArray>
			HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskPriority,sizeof(charTxScanTaskPriority),0xffff);
 800417c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004184:	2219      	movs	r2, #25
 8004186:	4895      	ldr	r0, [pc, #596]	; (80043dc <Taskmonitor+0x5a4>)
 8004188:	f7fd fe2f 	bl	8001dea <HAL_UART_Transmit>

			pStartStack = pxDelayTCB->pxStack;
 800418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			memset(charTxScanTaskStartStack,32,sizeof(charTxScanTaskStartStack));
 8004196:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800419a:	220f      	movs	r2, #15
 800419c:	2120      	movs	r1, #32
 800419e:	4618      	mov	r0, r3
 80041a0:	f001 f973 	bl	800548a <memset>
			Uint32ConvertHex(pStartStack,&(charTxScanTaskStartStack[0]));
 80041a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f990 	bl	80044d4 <Uint32ConvertHex>
			HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskStartStack,sizeof(charTxScanTaskStartStack),0xffff);
 80041b4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80041b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041bc:	220f      	movs	r2, #15
 80041be:	4887      	ldr	r0, [pc, #540]	; (80043dc <Taskmonitor+0x5a4>)
 80041c0:	f7fd fe13 	bl	8001dea <HAL_UART_Transmit>

			pxTopStack = pxDelayTCB->pxTopOfStack;
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			memset(charTxScanTaskTopStack,32,sizeof(charTxScanTaskTopStack));
 80041ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041d2:	2214      	movs	r2, #20
 80041d4:	2120      	movs	r1, #32
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 f957 	bl	800548a <memset>
			Uint32ConvertHex(pxTopStack,&(charTxScanTaskTopStack[0]));
 80041dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f974 	bl	80044d4 <Uint32ConvertHex>
//			strcat(charTxScanTaskTopStack,"\n");
//			strcat(charTxScanTaskTopStack,"\r");
			HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskTopStack,sizeof(charTxScanTaskTopStack),0xffff);
 80041ec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80041f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041f4:	2214      	movs	r2, #20
 80041f6:	4879      	ldr	r0, [pc, #484]	; (80043dc <Taskmonitor+0x5a4>)
 80041f8:	f7fd fdf7 	bl	8001dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t *)charState[1],sizeof(charState[1]),0xffff);
 80041fc:	f107 0314 	add.w	r3, r7, #20
 8004200:	f103 010a 	add.w	r1, r3, #10
 8004204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004208:	220a      	movs	r2, #10
 800420a:	4874      	ldr	r0, [pc, #464]	; (80043dc <Taskmonitor+0x5a4>)
 800420c:	f7fd fded 	bl	8001dea <HAL_UART_Transmit>
			configASSERT(TxScanListNumOfItem );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <Taskmonitor+0x3f4>
 8004216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800422a:	e7fe      	b.n	800422a <Taskmonitor+0x3f2>
			--TxScanListNumOfItem;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3b01      	subs	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
			pxItem = pxItem->pxNext;
 8004232:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		for(TxScanListNumOfItem;TxScanListNumOfItem>0;){
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f73f af46 	bgt.w	80040d0 <Taskmonitor+0x298>
		}

		TxScanListNumOfItem = xDelayedTaskList2.uxNumberOfItems;
 8004244:	4b67      	ldr	r3, [pc, #412]	; (80043e4 <Taskmonitor+0x5ac>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
		pxItem = listGET_ITEM_OF_HEAD_ENTRY(&(xDelayedTaskList2));
 800424a:	4b66      	ldr	r3, [pc, #408]	; (80043e4 <Taskmonitor+0x5ac>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		pxDelayTCB = pxItem->pvOwner;
 8004252:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		for(TxScanListNumOfItem;TxScanListNumOfItem>0;){
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	e0b5      	b.n	80043cc <Taskmonitor+0x594>
			priorityIndex = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	607b      	str	r3, [r7, #4]
			pxDelayTCB = pxItem->pvOwner;
 8004264:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			memset(charTxScanTaskName,32,sizeof(charTxScanTaskName));
 800426e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004272:	2210      	movs	r2, #16
 8004274:	2120      	movs	r1, #32
 8004276:	4618      	mov	r0, r3
 8004278:	f001 f907 	bl	800548a <memset>
			strncpy(charTxScanTaskName,pxDelayTCB->pcTaskName,strlen(pxDelayTCB->pcTaskName));
 800427c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004280:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004288:	3334      	adds	r3, #52	; 0x34
 800428a:	4618      	mov	r0, r3
 800428c:	f7fb ffa0 	bl	80001d0 <strlen>
 8004290:	4602      	mov	r2, r0
 8004292:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004296:	4621      	mov	r1, r4
 8004298:	4618      	mov	r0, r3
 800429a:	f001 f8fe 	bl	800549a <strncpy>
			HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskName,sizeof(charTxScanTaskName),0xffff);
 800429e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80042a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042a6:	2210      	movs	r2, #16
 80042a8:	484c      	ldr	r0, [pc, #304]	; (80043dc <Taskmonitor+0x5a4>)
 80042aa:	f7fd fd9e 	bl	8001dea <HAL_UART_Transmit>

			TxScanTaskPriority = pxDelayTCB->uxPriority;
 80042ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	60bb      	str	r3, [r7, #8]
			memset(charTxScanTaskPriority,32,sizeof(charTxScanTaskPriority));
 80042b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042ba:	2219      	movs	r2, #25
 80042bc:	2120      	movs	r1, #32
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 f8e3 	bl	800548a <memset>
			LongConvertCharArray(TxScanTaskPriority,&(charTxScanTaskPriority[0]),&(priorityIndex));
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	1d3a      	adds	r2, r7, #4
 80042c8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f88b 	bl	80043e8 <LongConvertCharArray>
			strcat(charTxScanTaskPriority,"/");
 80042d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fb ff7a 	bl	80001d0 <strlen>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042e4:	4413      	add	r3, r2
 80042e6:	493e      	ldr	r1, [pc, #248]	; (80043e0 <Taskmonitor+0x5a8>)
 80042e8:	461a      	mov	r2, r3
 80042ea:	460b      	mov	r3, r1
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	8013      	strh	r3, [r2, #0]
			priorityIndex++;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3301      	adds	r3, #1
 80042f4:	607b      	str	r3, [r7, #4]
			TxScanTaskPriority = pxDelayTCB->uxBasePriority;
 80042f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fc:	60bb      	str	r3, [r7, #8]
			LongConvertCharArray(TxScanTaskPriority,&(charTxScanTaskPriority[0]),&(priorityIndex));
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	1d3a      	adds	r2, r7, #4
 8004302:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f86e 	bl	80043e8 <LongConvertCharArray>
			HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskPriority,sizeof(charTxScanTaskPriority),0xffff);
 800430c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004314:	2219      	movs	r2, #25
 8004316:	4831      	ldr	r0, [pc, #196]	; (80043dc <Taskmonitor+0x5a4>)
 8004318:	f7fd fd67 	bl	8001dea <HAL_UART_Transmit>

			pStartStack = pxDelayTCB->pxStack;
 800431c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			memset(charTxScanTaskStartStack,32,sizeof(charTxScanTaskStartStack));
 8004326:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800432a:	220f      	movs	r2, #15
 800432c:	2120      	movs	r1, #32
 800432e:	4618      	mov	r0, r3
 8004330:	f001 f8ab 	bl	800548a <memset>
			Uint32ConvertHex(pStartStack,&(charTxScanTaskStartStack[0]));
 8004334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004338:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f8c8 	bl	80044d4 <Uint32ConvertHex>
			HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskStartStack,sizeof(charTxScanTaskStartStack),0xffff);
 8004344:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800434c:	220f      	movs	r2, #15
 800434e:	4823      	ldr	r0, [pc, #140]	; (80043dc <Taskmonitor+0x5a4>)
 8004350:	f7fd fd4b 	bl	8001dea <HAL_UART_Transmit>

			pxTopStack = pxDelayTCB->pxTopOfStack;
 8004354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			memset(charTxScanTaskTopStack,32,sizeof(charTxScanTaskTopStack));
 800435e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004362:	2214      	movs	r2, #20
 8004364:	2120      	movs	r1, #32
 8004366:	4618      	mov	r0, r3
 8004368:	f001 f88f 	bl	800548a <memset>
			Uint32ConvertHex(pxTopStack,&(charTxScanTaskTopStack[0]));
 800436c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004370:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f8ac 	bl	80044d4 <Uint32ConvertHex>
//			strcat(charTxScanTaskTopStack,"\n");
//			strcat(charTxScanTaskTopStack,"\r");
			HAL_UART_Transmit(&huart2,(uint8_t *)charTxScanTaskTopStack,sizeof(charTxScanTaskTopStack),0xffff);
 800437c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004384:	2214      	movs	r2, #20
 8004386:	4815      	ldr	r0, [pc, #84]	; (80043dc <Taskmonitor+0x5a4>)
 8004388:	f7fd fd2f 	bl	8001dea <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t *)charState[1],sizeof(charState[1]),0xffff);
 800438c:	f107 0314 	add.w	r3, r7, #20
 8004390:	f103 010a 	add.w	r1, r3, #10
 8004394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004398:	220a      	movs	r2, #10
 800439a:	4810      	ldr	r0, [pc, #64]	; (80043dc <Taskmonitor+0x5a4>)
 800439c:	f7fd fd25 	bl	8001dea <HAL_UART_Transmit>
			configASSERT(TxScanListNumOfItem );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <Taskmonitor+0x584>
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043ba:	e7fe      	b.n	80043ba <Taskmonitor+0x582>
			--TxScanListNumOfItem;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3b01      	subs	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]
			pxItem = pxItem->pxNext;
 80043c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		for(TxScanListNumOfItem;TxScanListNumOfItem>0;){
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f73f af46 	bgt.w	8004260 <Taskmonitor+0x428>
		}

}
 80043d4:	bf00      	nop
 80043d6:	37f0      	adds	r7, #240	; 0xf0
 80043d8:	46bd      	mov	sp, r7
 80043da:	bdb0      	pop	{r4, r5, r7, pc}
 80043dc:	20003e54 	.word	0x20003e54
 80043e0:	08005518 	.word	0x08005518
 80043e4:	20000170 	.word	0x20000170

080043e8 <LongConvertCharArray>:
void LongConvertCharArray(UBaseType_t TxScanTaskPriority, char *charTxScanTaskStack, int *index){
 80043e8:	b480      	push	{r7}
 80043ea:	b08b      	sub	sp, #44	; 0x2c
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
		uint32_t remainder,quotient;
		int reversal = 0,end = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
		char reversalChar;

		quotient = TxScanTaskPriority;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
		if(quotient == 0)
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d12b      	bne.n	800445e <LongConvertCharArray+0x76>
			charTxScanTaskStack[(*index)++] = '0' + quotient;
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	b2da      	uxtb	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	1c58      	adds	r0, r3, #1
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	6008      	str	r0, [r1, #0]
 8004414:	4619      	mov	r1, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	440b      	add	r3, r1
 800441a:	3230      	adds	r2, #48	; 0x30
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]
		while (quotient != 0){
 8004420:	e01d      	b.n	800445e <LongConvertCharArray+0x76>
			remainder = quotient % 10;
 8004422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004424:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <LongConvertCharArray+0xe8>)
 8004426:	fba3 1302 	umull	r1, r3, r3, r2
 800442a:	08d9      	lsrs	r1, r3, #3
 800442c:	460b      	mov	r3, r1
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	617b      	str	r3, [r7, #20]
			charTxScanTaskStack[(*index)++] = '0' + remainder;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	b2da      	uxtb	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1c58      	adds	r0, r3, #1
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	6008      	str	r0, [r1, #0]
 8004446:	4619      	mov	r1, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	440b      	add	r3, r1
 800444c:	3230      	adds	r2, #48	; 0x30
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]
			quotient = quotient / 10;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <LongConvertCharArray+0xe8>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	08db      	lsrs	r3, r3, #3
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
		while (quotient != 0){
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1de      	bne.n	8004422 <LongConvertCharArray+0x3a>
		}
		end = (*index)-1;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3b01      	subs	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
		for(reversal;reversal<=(end/2)+1;reversal++){
 800446c:	e017      	b.n	800449e <LongConvertCharArray+0xb6>
			reversalChar = charTxScanTaskStack[reversal];
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	4413      	add	r3, r2
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	76fb      	strb	r3, [r7, #27]
			charTxScanTaskStack[reversal] = charTxScanTaskStack[end];
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	441a      	add	r2, r3
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	440b      	add	r3, r1
 8004484:	7812      	ldrb	r2, [r2, #0]
 8004486:	701a      	strb	r2, [r3, #0]
			charTxScanTaskStack[end] = reversalChar;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4413      	add	r3, r2
 800448e:	7efa      	ldrb	r2, [r7, #27]
 8004490:	701a      	strb	r2, [r3, #0]
			end--;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3b01      	subs	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
		for(reversal;reversal<=(end/2)+1;reversal++){
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	3301      	adds	r3, #1
 800449c:	623b      	str	r3, [r7, #32]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	0fda      	lsrs	r2, r3, #31
 80044a2:	4413      	add	r3, r2
 80044a4:	105b      	asrs	r3, r3, #1
 80044a6:	3301      	adds	r3, #1
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	dddf      	ble.n	800446e <LongConvertCharArray+0x86>
		}
		charTxScanTaskStack[(*index)++] = 0;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	1c59      	adds	r1, r3, #1
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6011      	str	r1, [r2, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4413      	add	r3, r2
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
}
 80044c2:	bf00      	nop
 80044c4:	372c      	adds	r7, #44	; 0x2c
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	cccccccd 	.word	0xcccccccd

080044d4 <Uint32ConvertHex>:

void Uint32ConvertHex(volatile StackType_t pStack, char *charTxScanTaskStack){
 80044d4:	b480      	push	{r7}
 80044d6:	b089      	sub	sp, #36	; 0x24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
	uint32_t remainder,quotient;
	int j =  0;
 80044de:	2300      	movs	r3, #0
 80044e0:	61bb      	str	r3, [r7, #24]
	int reversal = 2,end = 0;
 80044e2:	2302      	movs	r3, #2
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
	char reversalChar;

	quotient = pStack;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	61fb      	str	r3, [r7, #28]
	charTxScanTaskStack[j++] = 48;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	61ba      	str	r2, [r7, #24]
 80044f4:	461a      	mov	r2, r3
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	4413      	add	r3, r2
 80044fa:	2230      	movs	r2, #48	; 0x30
 80044fc:	701a      	strb	r2, [r3, #0]
	charTxScanTaskStack[j++] = 88;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	61ba      	str	r2, [r7, #24]
 8004504:	461a      	mov	r2, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	4413      	add	r3, r2
 800450a:	2258      	movs	r2, #88	; 0x58
 800450c:	701a      	strb	r2, [r3, #0]
	while (quotient != 0)
 800450e:	e020      	b.n	8004552 <Uint32ConvertHex+0x7e>
	{
		remainder = quotient % 16;
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	60bb      	str	r3, [r7, #8]
		if (remainder < 10)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b09      	cmp	r3, #9
 800451c:	d80b      	bhi.n	8004536 <Uint32ConvertHex+0x62>
			charTxScanTaskStack[j++] = '0' + remainder;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	1c59      	adds	r1, r3, #1
 8004526:	61b9      	str	r1, [r7, #24]
 8004528:	4619      	mov	r1, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	440b      	add	r3, r1
 800452e:	3230      	adds	r2, #48	; 0x30
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e00a      	b.n	800454c <Uint32ConvertHex+0x78>
		else
			charTxScanTaskStack[j++] = 55 + remainder; // A = 65;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	1c59      	adds	r1, r3, #1
 800453e:	61b9      	str	r1, [r7, #24]
 8004540:	4619      	mov	r1, r3
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	440b      	add	r3, r1
 8004546:	3237      	adds	r2, #55	; 0x37
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]
		quotient = quotient / 16;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	091b      	lsrs	r3, r3, #4
 8004550:	61fb      	str	r3, [r7, #28]
	while (quotient != 0)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1db      	bne.n	8004510 <Uint32ConvertHex+0x3c>
	}
	end = j-1;
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	3b01      	subs	r3, #1
 800455c:	613b      	str	r3, [r7, #16]
	for(reversal;reversal<=(end/2)+1;reversal++){
 800455e:	e017      	b.n	8004590 <Uint32ConvertHex+0xbc>
		reversalChar = charTxScanTaskStack[reversal];
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	4413      	add	r3, r2
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	73fb      	strb	r3, [r7, #15]
		charTxScanTaskStack[reversal] = charTxScanTaskStack[end];
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	441a      	add	r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	6839      	ldr	r1, [r7, #0]
 8004574:	440b      	add	r3, r1
 8004576:	7812      	ldrb	r2, [r2, #0]
 8004578:	701a      	strb	r2, [r3, #0]
		charTxScanTaskStack[end] = reversalChar;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	4413      	add	r3, r2
 8004580:	7bfa      	ldrb	r2, [r7, #15]
 8004582:	701a      	strb	r2, [r3, #0]
		end--;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	3b01      	subs	r3, #1
 8004588:	613b      	str	r3, [r7, #16]
	for(reversal;reversal<=(end/2)+1;reversal++){
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	3301      	adds	r3, #1
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	0fda      	lsrs	r2, r3, #31
 8004594:	4413      	add	r3, r2
 8004596:	105b      	asrs	r3, r3, #1
 8004598:	3301      	adds	r3, #1
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	429a      	cmp	r2, r3
 800459e:	dddf      	ble.n	8004560 <Uint32ConvertHex+0x8c>
	}
	charTxScanTaskStack[j++] = 0;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	61ba      	str	r2, [r7, #24]
 80045a6:	461a      	mov	r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	4413      	add	r3, r2
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
}
 80045b0:	bf00      	nop
 80045b2:	3724      	adds	r7, #36	; 0x24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045c6:	f000 fad1 	bl	8004b6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <xTimerCreateTimerTask+0x54>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <xTimerCreateTimerTask+0x58>)
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	2302      	movs	r3, #2
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	2300      	movs	r3, #0
 80045dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045e0:	490d      	ldr	r1, [pc, #52]	; (8004618 <xTimerCreateTimerTask+0x5c>)
 80045e2:	480e      	ldr	r0, [pc, #56]	; (800461c <xTimerCreateTimerTask+0x60>)
 80045e4:	f7fe fdb0 	bl	8003148 <xTaskCreate>
 80045e8:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <xTimerCreateTimerTask+0x48>
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	603b      	str	r3, [r7, #0]
 8004602:	e7fe      	b.n	8004602 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8004604:	687b      	ldr	r3, [r7, #4]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000228 	.word	0x20000228
 8004614:	2000022c 	.word	0x2000022c
 8004618:	0800557c 	.word	0x0800557c
 800461c:	08004751 	.word	0x08004751

08004620 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800462e:	2300      	movs	r3, #0
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <xTimerGenericCommand+0x2c>
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	623b      	str	r3, [r7, #32]
 800464a:	e7fe      	b.n	800464a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800464c:	4b19      	ldr	r3, [pc, #100]	; (80046b4 <xTimerGenericCommand+0x94>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d02a      	beq.n	80046aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b05      	cmp	r3, #5
 8004664:	dc18      	bgt.n	8004698 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004666:	f7ff fadf 	bl	8003c28 <xTaskGetSchedulerState>
 800466a:	4603      	mov	r3, r0
 800466c:	2b02      	cmp	r3, #2
 800466e:	d109      	bne.n	8004684 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <xTimerGenericCommand+0x94>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	f107 0114 	add.w	r1, r7, #20
 8004678:	2300      	movs	r3, #0
 800467a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467c:	f7fe f98e 	bl	800299c <xQueueGenericSend>
 8004680:	6278      	str	r0, [r7, #36]	; 0x24
 8004682:	e012      	b.n	80046aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004684:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <xTimerGenericCommand+0x94>)
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	f107 0114 	add.w	r1, r7, #20
 800468c:	2300      	movs	r3, #0
 800468e:	2200      	movs	r2, #0
 8004690:	f7fe f984 	bl	800299c <xQueueGenericSend>
 8004694:	6278      	str	r0, [r7, #36]	; 0x24
 8004696:	e008      	b.n	80046aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <xTimerGenericCommand+0x94>)
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	f107 0114 	add.w	r1, r7, #20
 80046a0:	2300      	movs	r3, #0
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	f7fe fa74 	bl	8002b90 <xQueueGenericSendFromISR>
 80046a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3728      	adds	r7, #40	; 0x28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000228 	.word	0x20000228

080046b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af02      	add	r7, sp, #8
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c2:	4b22      	ldr	r3, [pc, #136]	; (800474c <prvProcessExpiredTimer+0x94>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe f873 	bl	80027bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d021      	beq.n	8004728 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	18d1      	adds	r1, r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	6978      	ldr	r0, [r7, #20]
 80046f2:	f000 f8d1 	bl	8004898 <prvInsertTimerInActiveList>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01e      	beq.n	800473a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046fc:	2300      	movs	r3, #0
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	2300      	movs	r3, #0
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	2100      	movs	r1, #0
 8004706:	6978      	ldr	r0, [r7, #20]
 8004708:	f7ff ff8a 	bl	8004620 <xTimerGenericCommand>
 800470c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d112      	bne.n	800473a <prvProcessExpiredTimer+0x82>
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e7fe      	b.n	8004726 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	b2da      	uxtb	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	6978      	ldr	r0, [r7, #20]
 8004740:	4798      	blx	r3
}
 8004742:	bf00      	nop
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000220 	.word	0x20000220

08004750 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004758:	f107 0308 	add.w	r3, r7, #8
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f857 	bl	8004810 <prvGetNextExpireTime>
 8004762:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4619      	mov	r1, r3
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f803 	bl	8004774 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800476e:	f000 f8d5 	bl	800491c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004772:	e7f1      	b.n	8004758 <prvTimerTask+0x8>

08004774 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800477e:	f7fe fea1 	bl	80034c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004782:	f107 0308 	add.w	r3, r7, #8
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f866 	bl	8004858 <prvSampleTimeNow>
 800478c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d130      	bne.n	80047f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <prvProcessTimerOrBlockTask+0x3c>
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d806      	bhi.n	80047b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047a2:	f7fe fe9d 	bl	80034e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047a6:	68f9      	ldr	r1, [r7, #12]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff85 	bl	80046b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047ae:	e024      	b.n	80047fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d008      	beq.n	80047c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047b6:	4b13      	ldr	r3, [pc, #76]	; (8004804 <prvProcessTimerOrBlockTask+0x90>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <prvProcessTimerOrBlockTask+0x50>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <prvProcessTimerOrBlockTask+0x52>
 80047c4:	2300      	movs	r3, #0
 80047c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047c8:	4b0f      	ldr	r3, [pc, #60]	; (8004808 <prvProcessTimerOrBlockTask+0x94>)
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4619      	mov	r1, r3
 80047d6:	f7fe fc83 	bl	80030e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047da:	f7fe fe81 	bl	80034e0 <xTaskResumeAll>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <prvProcessTimerOrBlockTask+0x98>)
 80047e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	f3bf 8f6f 	isb	sy
}
 80047f4:	e001      	b.n	80047fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047f6:	f7fe fe73 	bl	80034e0 <xTaskResumeAll>
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000224 	.word	0x20000224
 8004808:	20000228 	.word	0x20000228
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <prvGetNextExpireTime+0x44>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <prvGetNextExpireTime+0x16>
 8004822:	2201      	movs	r2, #1
 8004824:	e000      	b.n	8004828 <prvGetNextExpireTime+0x18>
 8004826:	2200      	movs	r2, #0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004834:	4b07      	ldr	r3, [pc, #28]	; (8004854 <prvGetNextExpireTime+0x44>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e001      	b.n	8004844 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000220 	.word	0x20000220

08004858 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004860:	f7fe feda 	bl	8003618 <xTaskGetTickCount>
 8004864:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <prvSampleTimeNow+0x3c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	429a      	cmp	r2, r3
 800486e:	d205      	bcs.n	800487c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004870:	f000 f918 	bl	8004aa4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e002      	b.n	8004882 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004882:	4a04      	ldr	r2, [pc, #16]	; (8004894 <prvSampleTimeNow+0x3c>)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004888:	68fb      	ldr	r3, [r7, #12]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000230 	.word	0x20000230

08004898 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d812      	bhi.n	80048e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d302      	bcc.n	80048d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	e01b      	b.n	800490a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048d2:	4b10      	ldr	r3, [pc, #64]	; (8004914 <prvInsertTimerInActiveList+0x7c>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3304      	adds	r3, #4
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f7fd ff34 	bl	800274a <vListInsert>
 80048e2:	e012      	b.n	800490a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d206      	bcs.n	80048fa <prvInsertTimerInActiveList+0x62>
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d302      	bcc.n	80048fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048f4:	2301      	movs	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	e007      	b.n	800490a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048fa:	4b07      	ldr	r3, [pc, #28]	; (8004918 <prvInsertTimerInActiveList+0x80>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3304      	adds	r3, #4
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f7fd ff20 	bl	800274a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800490a:	697b      	ldr	r3, [r7, #20]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20000224 	.word	0x20000224
 8004918:	20000220 	.word	0x20000220

0800491c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	; 0x30
 8004920:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004922:	e0ac      	b.n	8004a7e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f2c0 80a8 	blt.w	8004a7c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d004      	beq.n	8004942 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	3304      	adds	r3, #4
 800493c:	4618      	mov	r0, r3
 800493e:	f7fd ff3d 	bl	80027bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004942:	1d3b      	adds	r3, r7, #4
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff ff87 	bl	8004858 <prvSampleTimeNow>
 800494a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b09      	cmp	r3, #9
 8004950:	f200 8095 	bhi.w	8004a7e <prvProcessReceivedCommands+0x162>
 8004954:	a201      	add	r2, pc, #4	; (adr r2, 800495c <prvProcessReceivedCommands+0x40>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	08004985 	.word	0x08004985
 8004960:	08004985 	.word	0x08004985
 8004964:	08004985 	.word	0x08004985
 8004968:	080049f7 	.word	0x080049f7
 800496c:	08004a0b 	.word	0x08004a0b
 8004970:	08004a53 	.word	0x08004a53
 8004974:	08004985 	.word	0x08004985
 8004978:	08004985 	.word	0x08004985
 800497c:	080049f7 	.word	0x080049f7
 8004980:	08004a0b 	.word	0x08004a0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	b2da      	uxtb	r2, r3
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	18d1      	adds	r1, r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a3a      	ldr	r2, [r7, #32]
 80049a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049a4:	f7ff ff78 	bl	8004898 <prvInsertTimerInActiveList>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d067      	beq.n	8004a7e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05c      	beq.n	8004a7e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	441a      	add	r2, r3
 80049cc:	2300      	movs	r3, #0
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2300      	movs	r3, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049d6:	f7ff fe23 	bl	8004620 <xTimerGenericCommand>
 80049da:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d14d      	bne.n	8004a7e <prvProcessReceivedCommands+0x162>
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	e7fe      	b.n	80049f4 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004a08:	e039      	b.n	8004a7e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <prvProcessReceivedCommands+0x122>
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e7fe      	b.n	8004a3c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	18d1      	adds	r1, r2, r3
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	6a3a      	ldr	r2, [r7, #32]
 8004a4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a4c:	f7ff ff24 	bl	8004898 <prvInsertTimerInActiveList>
					break;
 8004a50:	e015      	b.n	8004a7e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a62:	f000 fbcf 	bl	8005204 <vPortFree>
 8004a66:	e00a      	b.n	8004a7e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a7a:	e000      	b.n	8004a7e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <prvProcessReceivedCommands+0x184>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f107 0108 	add.w	r1, r7, #8
 8004a86:	2200      	movs	r2, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe f915 	bl	8002cb8 <xQueueReceive>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f47f af47 	bne.w	8004924 <prvProcessReceivedCommands+0x8>
	}
}
 8004a96:	bf00      	nop
 8004a98:	3728      	adds	r7, #40	; 0x28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000228 	.word	0x20000228

08004aa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aaa:	e047      	b.n	8004b3c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aac:	4b2d      	ldr	r3, [pc, #180]	; (8004b64 <prvSwitchTimerLists+0xc0>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab6:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <prvSwitchTimerLists+0xc0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fd fe79 	bl	80027bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02d      	beq.n	8004b3c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d90e      	bls.n	8004b10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004afe:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <prvSwitchTimerLists+0xc0>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3304      	adds	r3, #4
 8004b06:	4619      	mov	r1, r3
 8004b08:	4610      	mov	r0, r2
 8004b0a:	f7fd fe1e 	bl	800274a <vListInsert>
 8004b0e:	e015      	b.n	8004b3c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b10:	2300      	movs	r3, #0
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2300      	movs	r3, #0
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	2100      	movs	r1, #0
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff fd80 	bl	8004620 <xTimerGenericCommand>
 8004b20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d109      	bne.n	8004b3c <prvSwitchTimerLists+0x98>
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	e7fe      	b.n	8004b3a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b3c:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <prvSwitchTimerLists+0xc0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1b2      	bne.n	8004aac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b46:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <prvSwitchTimerLists+0xc0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <prvSwitchTimerLists+0xc4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <prvSwitchTimerLists+0xc0>)
 8004b52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b54:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <prvSwitchTimerLists+0xc4>)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6013      	str	r3, [r2, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000220 	.word	0x20000220
 8004b68:	20000224 	.word	0x20000224

08004b6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b70:	f000 f96c 	bl	8004e4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b74:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <prvCheckForValidListAndQueue+0x54>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d11d      	bne.n	8004bb8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b7c:	4811      	ldr	r0, [pc, #68]	; (8004bc4 <prvCheckForValidListAndQueue+0x58>)
 8004b7e:	f7fd fd93 	bl	80026a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b82:	4811      	ldr	r0, [pc, #68]	; (8004bc8 <prvCheckForValidListAndQueue+0x5c>)
 8004b84:	f7fd fd90 	bl	80026a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <prvCheckForValidListAndQueue+0x60>)
 8004b8a:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <prvCheckForValidListAndQueue+0x58>)
 8004b8c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b8e:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <prvCheckForValidListAndQueue+0x64>)
 8004b90:	4a0d      	ldr	r2, [pc, #52]	; (8004bc8 <prvCheckForValidListAndQueue+0x5c>)
 8004b92:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004b94:	2200      	movs	r2, #0
 8004b96:	210c      	movs	r1, #12
 8004b98:	200a      	movs	r0, #10
 8004b9a:	f7fd fea1 	bl	80028e0 <xQueueGenericCreate>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <prvCheckForValidListAndQueue+0x54>)
 8004ba2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <prvCheckForValidListAndQueue+0x54>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <prvCheckForValidListAndQueue+0x54>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4908      	ldr	r1, [pc, #32]	; (8004bd4 <prvCheckForValidListAndQueue+0x68>)
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe fa6c 	bl	8003090 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bb8:	f000 f976 	bl	8004ea8 <vPortExitCritical>
}
 8004bbc:	bf00      	nop
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000228 	.word	0x20000228
 8004bc4:	200001f8 	.word	0x200001f8
 8004bc8:	2000020c 	.word	0x2000020c
 8004bcc:	20000220 	.word	0x20000220
 8004bd0:	20000224 	.word	0x20000224
 8004bd4:	08005584 	.word	0x08005584

08004bd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3b04      	subs	r3, #4
 8004be8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3b04      	subs	r3, #4
 8004bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f023 0201 	bic.w	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3b04      	subs	r3, #4
 8004c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c08:	4a0c      	ldr	r2, [pc, #48]	; (8004c3c <pxPortInitialiseStack+0x64>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b14      	subs	r3, #20
 8004c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3b04      	subs	r3, #4
 8004c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f06f 0202 	mvn.w	r2, #2
 8004c26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3b20      	subs	r3, #32
 8004c2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	08004c41 	.word	0x08004c41

08004c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c4a:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <prvTaskExitError+0x50>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c52:	d009      	beq.n	8004c68 <prvTaskExitError+0x28>
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e7fe      	b.n	8004c66 <prvTaskExitError+0x26>
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c7a:	bf00      	nop
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0fc      	beq.n	8004c7c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	2000000c 	.word	0x2000000c
	...

08004ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ca0:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <pxCurrentTCBConst2>)
 8004ca2:	6819      	ldr	r1, [r3, #0]
 8004ca4:	6808      	ldr	r0, [r1, #0]
 8004ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004caa:	f380 8809 	msr	PSP, r0
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f04f 0000 	mov.w	r0, #0
 8004cb6:	f380 8811 	msr	BASEPRI, r0
 8004cba:	4770      	bx	lr
 8004cbc:	f3af 8000 	nop.w

08004cc0 <pxCurrentTCBConst2>:
 8004cc0:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop

08004cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004cc8:	4808      	ldr	r0, [pc, #32]	; (8004cec <prvPortStartFirstTask+0x24>)
 8004cca:	6800      	ldr	r0, [r0, #0]
 8004ccc:	6800      	ldr	r0, [r0, #0]
 8004cce:	f380 8808 	msr	MSP, r0
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f380 8814 	msr	CONTROL, r0
 8004cda:	b662      	cpsie	i
 8004cdc:	b661      	cpsie	f
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	df00      	svc	0
 8004ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cea:	bf00      	nop
 8004cec:	e000ed08 	.word	0xe000ed08

08004cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cf6:	4b4c      	ldr	r3, [pc, #304]	; (8004e28 <xPortStartScheduler+0x138>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a4c      	ldr	r2, [pc, #304]	; (8004e2c <xPortStartScheduler+0x13c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d109      	bne.n	8004d14 <xPortStartScheduler+0x24>
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	61bb      	str	r3, [r7, #24]
 8004d12:	e7fe      	b.n	8004d12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d14:	4b44      	ldr	r3, [pc, #272]	; (8004e28 <xPortStartScheduler+0x138>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a45      	ldr	r2, [pc, #276]	; (8004e30 <xPortStartScheduler+0x140>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d109      	bne.n	8004d32 <xPortStartScheduler+0x42>
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	e7fe      	b.n	8004d30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d32:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <xPortStartScheduler+0x144>)
 8004d34:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	22ff      	movs	r2, #255	; 0xff
 8004d42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	4b38      	ldr	r3, [pc, #224]	; (8004e38 <xPortStartScheduler+0x148>)
 8004d58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d5a:	4b38      	ldr	r3, [pc, #224]	; (8004e3c <xPortStartScheduler+0x14c>)
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d60:	e009      	b.n	8004d76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004d62:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <xPortStartScheduler+0x14c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	4a34      	ldr	r2, [pc, #208]	; (8004e3c <xPortStartScheduler+0x14c>)
 8004d6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d6c:	79fb      	ldrb	r3, [r7, #7]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7e:	2b80      	cmp	r3, #128	; 0x80
 8004d80:	d0ef      	beq.n	8004d62 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004d82:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <xPortStartScheduler+0x14c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f1c3 0307 	rsb	r3, r3, #7
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d009      	beq.n	8004da2 <xPortStartScheduler+0xb2>
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	e7fe      	b.n	8004da0 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004da2:	4b26      	ldr	r3, [pc, #152]	; (8004e3c <xPortStartScheduler+0x14c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f1c3 0307 	rsb	r3, r3, #7
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d009      	beq.n	8004dc2 <xPortStartScheduler+0xd2>
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e7fe      	b.n	8004dc0 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004dc2:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <xPortStartScheduler+0x14c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <xPortStartScheduler+0x14c>)
 8004dca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <xPortStartScheduler+0x14c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dd4:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <xPortStartScheduler+0x14c>)
 8004dd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004de0:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <xPortStartScheduler+0x150>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a16      	ldr	r2, [pc, #88]	; (8004e40 <xPortStartScheduler+0x150>)
 8004de6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004dec:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <xPortStartScheduler+0x150>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <xPortStartScheduler+0x150>)
 8004df2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004df6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004df8:	f000 f8d6 	bl	8004fa8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dfc:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <xPortStartScheduler+0x154>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e02:	f000 f8f5 	bl	8004ff0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <xPortStartScheduler+0x158>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a0f      	ldr	r2, [pc, #60]	; (8004e48 <xPortStartScheduler+0x158>)
 8004e0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e12:	f7ff ff59 	bl	8004cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e16:	f7fe fcc7 	bl	80037a8 <vTaskSwitchContext>
	prvTaskExitError();
 8004e1a:	f7ff ff11 	bl	8004c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e000ed00 	.word	0xe000ed00
 8004e2c:	410fc271 	.word	0x410fc271
 8004e30:	410fc270 	.word	0x410fc270
 8004e34:	e000e400 	.word	0xe000e400
 8004e38:	20000234 	.word	0x20000234
 8004e3c:	20000238 	.word	0x20000238
 8004e40:	e000ed20 	.word	0xe000ed20
 8004e44:	2000000c 	.word	0x2000000c
 8004e48:	e000ef34 	.word	0xe000ef34

08004e4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e64:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <vPortEnterCritical+0x54>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	4a0d      	ldr	r2, [pc, #52]	; (8004ea0 <vPortEnterCritical+0x54>)
 8004e6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <vPortEnterCritical+0x54>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d10e      	bne.n	8004e94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <vPortEnterCritical+0x58>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d009      	beq.n	8004e94 <vPortEnterCritical+0x48>
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	e7fe      	b.n	8004e92 <vPortEnterCritical+0x46>
	}
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	2000000c 	.word	0x2000000c
 8004ea4:	e000ed04 	.word	0xe000ed04

08004ea8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004eae:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <vPortExitCritical+0x4c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <vPortExitCritical+0x22>
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	e7fe      	b.n	8004ec8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004eca:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <vPortExitCritical+0x4c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <vPortExitCritical+0x4c>)
 8004ed2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ed4:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <vPortExitCritical+0x4c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d104      	bne.n	8004ee6 <vPortExitCritical+0x3e>
 8004edc:	2300      	movs	r3, #0
 8004ede:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	2000000c 	.word	0x2000000c
	...

08004f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f00:	f3ef 8009 	mrs	r0, PSP
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <pxCurrentTCBConst>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	f01e 0f10 	tst.w	lr, #16
 8004f10:	bf08      	it	eq
 8004f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1a:	6010      	str	r0, [r2, #0]
 8004f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f24:	f380 8811 	msr	BASEPRI, r0
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f7fe fc3a 	bl	80037a8 <vTaskSwitchContext>
 8004f34:	f04f 0000 	mov.w	r0, #0
 8004f38:	f380 8811 	msr	BASEPRI, r0
 8004f3c:	bc09      	pop	{r0, r3}
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	6808      	ldr	r0, [r1, #0]
 8004f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f46:	f01e 0f10 	tst.w	lr, #16
 8004f4a:	bf08      	it	eq
 8004f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f50:	f380 8809 	msr	PSP, r0
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	f3af 8000 	nop.w

08004f60 <pxCurrentTCBConst>:
 8004f60:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop

08004f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f80:	f7fe fb5a 	bl	8003638 <xTaskIncrementTick>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <SysTick_Handler+0x3c>)
 8004f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	2300      	movs	r3, #0
 8004f94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <vPortSetupTimerInterrupt+0x34>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <vPortSetupTimerInterrupt+0x38>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <vPortSetupTimerInterrupt+0x3c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a0a      	ldr	r2, [pc, #40]	; (8004fe8 <vPortSetupTimerInterrupt+0x40>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	099b      	lsrs	r3, r3, #6
 8004fc4:	4a09      	ldr	r2, [pc, #36]	; (8004fec <vPortSetupTimerInterrupt+0x44>)
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fca:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <vPortSetupTimerInterrupt+0x34>)
 8004fcc:	2207      	movs	r2, #7
 8004fce:	601a      	str	r2, [r3, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	e000e010 	.word	0xe000e010
 8004fe0:	e000e018 	.word	0xe000e018
 8004fe4:	20000000 	.word	0x20000000
 8004fe8:	10624dd3 	.word	0x10624dd3
 8004fec:	e000e014 	.word	0xe000e014

08004ff0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ff0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005000 <vPortEnableVFP+0x10>
 8004ff4:	6801      	ldr	r1, [r0, #0]
 8004ff6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ffa:	6001      	str	r1, [r0, #0]
 8004ffc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ffe:	bf00      	nop
 8005000:	e000ed88 	.word	0xe000ed88

08005004 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800500a:	f3ef 8305 	mrs	r3, IPSR
 800500e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b0f      	cmp	r3, #15
 8005014:	d913      	bls.n	800503e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005016:	4a16      	ldr	r2, [pc, #88]	; (8005070 <vPortValidateInterruptPriority+0x6c>)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005020:	4b14      	ldr	r3, [pc, #80]	; (8005074 <vPortValidateInterruptPriority+0x70>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	7afa      	ldrb	r2, [r7, #11]
 8005026:	429a      	cmp	r2, r3
 8005028:	d209      	bcs.n	800503e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	607b      	str	r3, [r7, #4]
 800503c:	e7fe      	b.n	800503c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800503e:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <vPortValidateInterruptPriority+0x74>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <vPortValidateInterruptPriority+0x78>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d909      	bls.n	8005062 <vPortValidateInterruptPriority+0x5e>
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	e7fe      	b.n	8005060 <vPortValidateInterruptPriority+0x5c>
	}
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	e000e3f0 	.word	0xe000e3f0
 8005074:	20000234 	.word	0x20000234
 8005078:	e000ed0c 	.word	0xe000ed0c
 800507c:	20000238 	.word	0x20000238

08005080 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800508c:	f7fe fa1a 	bl	80034c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005090:	4b57      	ldr	r3, [pc, #348]	; (80051f0 <pvPortMalloc+0x170>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005098:	f000 f90c 	bl	80052b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800509c:	4b55      	ldr	r3, [pc, #340]	; (80051f4 <pvPortMalloc+0x174>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f040 808c 	bne.w	80051c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01c      	beq.n	80050ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80050b0:	2208      	movs	r2, #8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4413      	add	r3, r2
 80050b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d013      	beq.n	80050ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f023 0307 	bic.w	r3, r3, #7
 80050c8:	3308      	adds	r3, #8
 80050ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <pvPortMalloc+0x6a>
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e7fe      	b.n	80050e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d068      	beq.n	80051c2 <pvPortMalloc+0x142>
 80050f0:	4b41      	ldr	r3, [pc, #260]	; (80051f8 <pvPortMalloc+0x178>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d863      	bhi.n	80051c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050fa:	4b40      	ldr	r3, [pc, #256]	; (80051fc <pvPortMalloc+0x17c>)
 80050fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050fe:	4b3f      	ldr	r3, [pc, #252]	; (80051fc <pvPortMalloc+0x17c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005104:	e004      	b.n	8005110 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d903      	bls.n	8005122 <pvPortMalloc+0xa2>
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f1      	bne.n	8005106 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005122:	4b33      	ldr	r3, [pc, #204]	; (80051f0 <pvPortMalloc+0x170>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005128:	429a      	cmp	r2, r3
 800512a:	d04a      	beq.n	80051c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2208      	movs	r2, #8
 8005132:	4413      	add	r3, r2
 8005134:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	1ad2      	subs	r2, r2, r3
 8005146:	2308      	movs	r3, #8
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	429a      	cmp	r2, r3
 800514c:	d91e      	bls.n	800518c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4413      	add	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	2b00      	cmp	r3, #0
 800515e:	d009      	beq.n	8005174 <pvPortMalloc+0xf4>
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	e7fe      	b.n	8005172 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	1ad2      	subs	r2, r2, r3
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005186:	69b8      	ldr	r0, [r7, #24]
 8005188:	f000 f8f6 	bl	8005378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800518c:	4b1a      	ldr	r3, [pc, #104]	; (80051f8 <pvPortMalloc+0x178>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <pvPortMalloc+0x178>)
 8005198:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800519a:	4b17      	ldr	r3, [pc, #92]	; (80051f8 <pvPortMalloc+0x178>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4b18      	ldr	r3, [pc, #96]	; (8005200 <pvPortMalloc+0x180>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d203      	bcs.n	80051ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <pvPortMalloc+0x178>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a15      	ldr	r2, [pc, #84]	; (8005200 <pvPortMalloc+0x180>)
 80051ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <pvPortMalloc+0x174>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051c2:	f7fe f98d 	bl	80034e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <pvPortMalloc+0x164>
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e7fe      	b.n	80051e2 <pvPortMalloc+0x162>
	return pvReturn;
 80051e4:	69fb      	ldr	r3, [r7, #28]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3728      	adds	r7, #40	; 0x28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20003e44 	.word	0x20003e44
 80051f4:	20003e50 	.word	0x20003e50
 80051f8:	20003e48 	.word	0x20003e48
 80051fc:	20003e3c 	.word	0x20003e3c
 8005200:	20003e4c 	.word	0x20003e4c

08005204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d046      	beq.n	80052a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005216:	2308      	movs	r3, #8
 8005218:	425b      	negs	r3, r3
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4413      	add	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	4b20      	ldr	r3, [pc, #128]	; (80052ac <vPortFree+0xa8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <vPortFree+0x42>
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	e7fe      	b.n	8005244 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <vPortFree+0x5e>
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	e7fe      	b.n	8005260 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	4b11      	ldr	r3, [pc, #68]	; (80052ac <vPortFree+0xa8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d019      	beq.n	80052a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d115      	bne.n	80052a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <vPortFree+0xa8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	43db      	mvns	r3, r3
 8005282:	401a      	ands	r2, r3
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005288:	f7fe f91c 	bl	80034c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <vPortFree+0xac>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4413      	add	r3, r2
 8005296:	4a06      	ldr	r2, [pc, #24]	; (80052b0 <vPortFree+0xac>)
 8005298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800529a:	6938      	ldr	r0, [r7, #16]
 800529c:	f000 f86c 	bl	8005378 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80052a0:	f7fe f91e 	bl	80034e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052a4:	bf00      	nop
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20003e50 	.word	0x20003e50
 80052b0:	20003e48 	.word	0x20003e48

080052b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052c0:	4b27      	ldr	r3, [pc, #156]	; (8005360 <prvHeapInit+0xac>)
 80052c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00c      	beq.n	80052e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3307      	adds	r3, #7
 80052d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0307 	bic.w	r3, r3, #7
 80052da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <prvHeapInit+0xac>)
 80052e4:	4413      	add	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052ec:	4a1d      	ldr	r2, [pc, #116]	; (8005364 <prvHeapInit+0xb0>)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052f2:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <prvHeapInit+0xb0>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4413      	add	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005300:	2208      	movs	r2, #8
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0307 	bic.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a15      	ldr	r2, [pc, #84]	; (8005368 <prvHeapInit+0xb4>)
 8005314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <prvHeapInit+0xb4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2200      	movs	r2, #0
 800531c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800531e:	4b12      	ldr	r3, [pc, #72]	; (8005368 <prvHeapInit+0xb4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	1ad2      	subs	r2, r2, r3
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005334:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <prvHeapInit+0xb4>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	4a0a      	ldr	r2, [pc, #40]	; (800536c <prvHeapInit+0xb8>)
 8005342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4a09      	ldr	r2, [pc, #36]	; (8005370 <prvHeapInit+0xbc>)
 800534a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <prvHeapInit+0xc0>)
 800534e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005352:	601a      	str	r2, [r3, #0]
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	2000023c 	.word	0x2000023c
 8005364:	20003e3c 	.word	0x20003e3c
 8005368:	20003e44 	.word	0x20003e44
 800536c:	20003e4c 	.word	0x20003e4c
 8005370:	20003e48 	.word	0x20003e48
 8005374:	20003e50 	.word	0x20003e50

08005378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005380:	4b28      	ldr	r3, [pc, #160]	; (8005424 <prvInsertBlockIntoFreeList+0xac>)
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	e002      	b.n	800538c <prvInsertBlockIntoFreeList+0x14>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	429a      	cmp	r2, r3
 8005394:	d8f7      	bhi.n	8005386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	4413      	add	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d108      	bne.n	80053ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	441a      	add	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d118      	bne.n	8005400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <prvInsertBlockIntoFreeList+0xb0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d00d      	beq.n	80053f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	441a      	add	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e008      	b.n	8005408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <prvInsertBlockIntoFreeList+0xb0>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e003      	b.n	8005408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	d002      	beq.n	8005416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20003e3c 	.word	0x20003e3c
 8005428:	20003e44 	.word	0x20003e44

0800542c <__libc_init_array>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4e0d      	ldr	r6, [pc, #52]	; (8005464 <__libc_init_array+0x38>)
 8005430:	4c0d      	ldr	r4, [pc, #52]	; (8005468 <__libc_init_array+0x3c>)
 8005432:	1ba4      	subs	r4, r4, r6
 8005434:	10a4      	asrs	r4, r4, #2
 8005436:	2500      	movs	r5, #0
 8005438:	42a5      	cmp	r5, r4
 800543a:	d109      	bne.n	8005450 <__libc_init_array+0x24>
 800543c:	4e0b      	ldr	r6, [pc, #44]	; (800546c <__libc_init_array+0x40>)
 800543e:	4c0c      	ldr	r4, [pc, #48]	; (8005470 <__libc_init_array+0x44>)
 8005440:	f000 f840 	bl	80054c4 <_init>
 8005444:	1ba4      	subs	r4, r4, r6
 8005446:	10a4      	asrs	r4, r4, #2
 8005448:	2500      	movs	r5, #0
 800544a:	42a5      	cmp	r5, r4
 800544c:	d105      	bne.n	800545a <__libc_init_array+0x2e>
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005454:	4798      	blx	r3
 8005456:	3501      	adds	r5, #1
 8005458:	e7ee      	b.n	8005438 <__libc_init_array+0xc>
 800545a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800545e:	4798      	blx	r3
 8005460:	3501      	adds	r5, #1
 8005462:	e7f2      	b.n	800544a <__libc_init_array+0x1e>
 8005464:	080055ac 	.word	0x080055ac
 8005468:	080055ac 	.word	0x080055ac
 800546c:	080055ac 	.word	0x080055ac
 8005470:	080055b0 	.word	0x080055b0

08005474 <memcpy>:
 8005474:	b510      	push	{r4, lr}
 8005476:	1e43      	subs	r3, r0, #1
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	d100      	bne.n	8005480 <memcpy+0xc>
 800547e:	bd10      	pop	{r4, pc}
 8005480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005488:	e7f7      	b.n	800547a <memcpy+0x6>

0800548a <memset>:
 800548a:	4402      	add	r2, r0
 800548c:	4603      	mov	r3, r0
 800548e:	4293      	cmp	r3, r2
 8005490:	d100      	bne.n	8005494 <memset+0xa>
 8005492:	4770      	bx	lr
 8005494:	f803 1b01 	strb.w	r1, [r3], #1
 8005498:	e7f9      	b.n	800548e <memset+0x4>

0800549a <strncpy>:
 800549a:	b570      	push	{r4, r5, r6, lr}
 800549c:	3901      	subs	r1, #1
 800549e:	4604      	mov	r4, r0
 80054a0:	b902      	cbnz	r2, 80054a4 <strncpy+0xa>
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	4623      	mov	r3, r4
 80054a6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80054aa:	f803 5b01 	strb.w	r5, [r3], #1
 80054ae:	1e56      	subs	r6, r2, #1
 80054b0:	b92d      	cbnz	r5, 80054be <strncpy+0x24>
 80054b2:	4414      	add	r4, r2
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d0f4      	beq.n	80054a2 <strncpy+0x8>
 80054b8:	f803 5b01 	strb.w	r5, [r3], #1
 80054bc:	e7fa      	b.n	80054b4 <strncpy+0x1a>
 80054be:	461c      	mov	r4, r3
 80054c0:	4632      	mov	r2, r6
 80054c2:	e7ed      	b.n	80054a0 <strncpy+0x6>

080054c4 <_init>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr

080054d0 <_fini>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr
